name: "Build"

on:
  workflow_call:
  workflow_dispatch:

jobs:
  nix-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - id: set-matrix
        run: |
          matrix=$(nix eval --json .#githubMatrix.matrix)
          echo matrix=$matrix >> $GITHUB_OUTPUT

  build-nix:
    needs:
      - nix-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.nix-matrix.outputs.matrix) }}
    name: ${{ matrix.attr }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - run: nix build .?submodules=1#packages.${{ matrix.attr }}
      - run: find result/bin -exec zip -r ${{ matrix.attr }}.zip {} +

      - uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.attr }}
          path: ${{ matrix.attr }}.zip
          retention-days: 1

  generate-assets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - run: nix run .?submodules=1#generate-assets
      - run: find result/lib/* -exec zip -r components.zip {} +

      - uses: actions/upload-artifact@v4
        with:
          name: components
          path: components.zip
          retention-days: 1

  build-windows:
    needs:
      - generate-assets
    runs-on: windows-latest
    strategy:
      matrix:
        package: [unavi-app, unavi-server]
    name: x86_64-windows.${{ matrix.package }}
    steps:
      - uses: actions/checkout@v4

      - uses: Swatinem/rust-cache@v2
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - run: mkdir result

      - if: ${{ matrix.package == 'unavi-app' }}
        uses: actions/download-artifact@v2
        with:
          name: components

      - if: ${{ matrix.package == 'unavi-app' }}
        name: Copy generated assets
        run: |
          New-Item -ItemType Directory -Path "assets/components"
          Expand-Archive -Path components.zip -DestinationPath "assets/components"

      - name: Build package
        run: |
          cargo build -p ${{ matrix.package }} --release --target x86_64-pc-windows-msvc
          mv target/x86_64-pc-windows-msvc/release/*.exe result

      - run: Compress-Archive -Path result -DestinationPath x86_64-windows.${{ matrix.path }}.zip

      - uses: actions/upload-artifact@v4
        with:
          name: x86_64-windows.${{ matrix.path }}
          path: x86_64-windows.${{ matrix.path }}.zip
          retention-days: 1
