package unavi:vscreen;

world guest {
    import unavi:shapes/api;
    import wired:log/api;

    export screen;
}

interface screen {
  use unavi:layout/container.{container};
  use wired:math/types.{transform, vec2, vec3};
  use wired:scene/node.{node};

  variant screen-shape {
    circle(f32),
    rectangle(vec2),
  }

  /// Animated screen UI.
  /// On press, expands into child screens.
  resource screen {
    constructor(shape: screen-shape);

    root: func() -> container;

    visible: func() -> bool;
    set-visible: func(value: bool);

    /// How long it takes to open the screen, in seconds.
    open-duration: func() -> f32;
    set-open-duration: func(value: f32);

    children: func() -> list<screen>;
    add-child: func(value: borrow<screen>);
    remove-child: func(value: borrow<screen>);

    /// Updates the screen and all children.
    update: func(delta: f32);
  }
}
