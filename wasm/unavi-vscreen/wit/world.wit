package unavi:vscreen;

world guest {
    import unavi:shapes/api;

    export screen;
}

interface screen {
  use unavi:layout/container.{container};
  use wired:math/types.{transform, vec2, vec3};
  use wired:scene/node.{node};

  variant screen-shape {
    circle(f32),
    rectangle(vec2),
  }

  variant child-layout {
    /// Children are aranged in two wings, on either side of the screen.
    butterfly,
    /// Children are aranged in a circle around the screen.
    circle,
    /// Children are given a specific relative transform.
    transform(transform),
  }

  /// Animated screen UI.
  /// On press, expands into child screens.
  resource screen {
    constructor(shape: screen-shape);

    root: func() -> container;

    visible: func() -> bool;
    set-visible: func(value: bool);

    child-layout: func() -> child-layout;
    set-child-layout: func(value: child-layout);

    children: func() -> list<screen>;
    add-child: func(value: borrow<screen>);
    remove-child: func(value: borrow<screen>);

    /// Updates the screen and all children.
    update: func(delta: f32);
  }
}
