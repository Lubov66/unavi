// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod unavi {
    #[allow(dead_code)]
    pub mod shapes {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Mesh = super::super::super::wired::gltf::mesh::Mesh;
            pub type Vec3 = super::super::super::wired::math::types::Vec3;
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_cuboid(size: Vec3) -> Mesh {
                unsafe {
                    let super::super::super::wired::math::types::Vec3 {
                        x: x0,
                        y: y0,
                        z: z0,
                    } = size;

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "unavi:shapes/api")]
                    extern "C" {
                        #[link_name = "create-cuboid"]
                        fn wit_import(_: f32, _: f32, _: f32) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: f32, _: f32, _: f32) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_f32(x0), _rt::as_f32(y0), _rt::as_f32(z0));
                    super::super::super::wired::gltf::mesh::Mesh::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Creates a UV sphere with the given number of
            /// longitudinal sectors and latitudinal stacks, aka horizontal and vertical resolution.
            ///
            /// A good default is `32` sectors and `18` stacks.
            pub fn create_sphere(radius: f32, sectors: u32, stacks: u32) -> Mesh {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "unavi:shapes/api")]
                    extern "C" {
                        #[link_name = "create-sphere"]
                        fn wit_import(_: f32, _: i32, _: i32) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: f32, _: i32, _: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        _rt::as_f32(&radius),
                        _rt::as_i32(&sectors),
                        _rt::as_i32(&stacks),
                    );
                    super::super::super::wired::gltf::mesh::Mesh::from_handle(ret as u32)
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wired {
    #[allow(dead_code)]
    pub mod gltf {
        #[allow(dead_code, clippy::all)]
        pub mod material {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Color {
                pub r: f32,
                pub g: f32,
                pub b: f32,
                pub a: f32,
            }
            impl ::core::fmt::Debug for Color {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Color")
                        .field("r", &self.r)
                        .field("g", &self.g)
                        .field("b", &self.b)
                        .field("a", &self.a)
                        .finish()
                }
            }
            /// A reference to a material.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Material {
                handle: _rt::Resource<Material>,
            }

            impl Material {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Material {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[resource-drop]material"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn color(&self) -> Color {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.color"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        let l4 = *ptr0.add(12).cast::<f32>();
                        Color {
                            r: l1,
                            g: l2,
                            b: l3,
                            a: l4,
                        }
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_color(&self, value: Color) {
                    unsafe {
                        let Color {
                            r: r0,
                            g: g0,
                            b: b0,
                            a: a0,
                        } = value;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.set-color"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(r0),
                            _rt::as_f32(g0),
                            _rt::as_f32(b0),
                            _rt::as_f32(a0),
                        );
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_materials() -> _rt::Vec<Material> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/material")]
                    extern "C" {
                        #[link_name = "list-materials"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base4 = l1;
                    let len4 = l2;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 4);
                        let e4 = {
                            let l3 = *base.add(0).cast::<i32>();

                            Material::from_handle(l3 as u32)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 4, 4);
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_material() -> Material {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/material")]
                    extern "C" {
                        #[link_name = "create-material"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Material::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_material(value: Material) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/material")]
                    extern "C" {
                        #[link_name = "remove-material"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import((&value).take_handle() as i32);
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod mesh {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Material = super::super::super::wired::gltf::material::Material;
            /// A reference to a primitive.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Primitive {
                handle: _rt::Resource<Primitive>,
            }

            impl Primitive {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Primitive {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[resource-drop]primitive"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// A reference to a mesh.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Mesh {
                handle: _rt::Resource<Mesh>,
            }

            impl Mesh {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Mesh {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[resource-drop]mesh"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn material(&self) -> Option<Material> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.material"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::gltf::material::Material::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_material(&self, value: Option<&Material>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-material"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_indices(&self, value: &[u32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-indices"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_normals(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-normals"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_positions(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-positions"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_uvs(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-uvs"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_primitives(&self) -> _rt::Vec<Primitive> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.list-primitives"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Primitive::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn create_primitive(&self) -> Primitive {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.create-primitive"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Primitive::from_handle(ret as u32)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_primitive(&self, value: Primitive) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.remove-primitive"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (&value).take_handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_meshes() -> _rt::Vec<Mesh> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/mesh")]
                    extern "C" {
                        #[link_name = "list-meshes"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base4 = l1;
                    let len4 = l2;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 4);
                        let e4 = {
                            let l3 = *base.add(0).cast::<i32>();

                            Mesh::from_handle(l3 as u32)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 4, 4);
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_mesh() -> Mesh {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/mesh")]
                    extern "C" {
                        #[link_name = "create-mesh"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Mesh::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_mesh(value: Mesh) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/mesh")]
                    extern "C" {
                        #[link_name = "remove-mesh"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import((&value).take_handle() as i32);
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod node {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Mesh = super::super::super::wired::gltf::mesh::Mesh;
            pub type Transform = super::super::super::wired::math::types::Transform;
            pub type Collider = super::super::super::wired::physics::types::Collider;
            pub type RigidBody = super::super::super::wired::physics::types::RigidBody;
            /// A reference to a node.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Node {
                handle: _rt::Resource<Node>,
            }

            impl Node {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Node {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[resource-drop]node"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn children(&self) -> _rt::Vec<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.children"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Node::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_child(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.add-child"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_child(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.remove-child"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn parent(&self) -> Option<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.parent"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    Node::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn transform(&self) -> Transform {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.transform"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        let l4 = *ptr0.add(12).cast::<f32>();
                        let l5 = *ptr0.add(16).cast::<f32>();
                        let l6 = *ptr0.add(20).cast::<f32>();
                        let l7 = *ptr0.add(24).cast::<f32>();
                        let l8 = *ptr0.add(28).cast::<f32>();
                        let l9 = *ptr0.add(32).cast::<f32>();
                        let l10 = *ptr0.add(36).cast::<f32>();
                        super::super::super::wired::math::types::Transform {
                            rotation: super::super::super::wired::math::types::Quat {
                                x: l1,
                                y: l2,
                                z: l3,
                                w: l4,
                            },
                            scale: super::super::super::wired::math::types::Vec3 {
                                x: l5,
                                y: l6,
                                z: l7,
                            },
                            translation: super::super::super::wired::math::types::Vec3 {
                                x: l8,
                                y: l9,
                                z: l10,
                            },
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_transform(&self, value: Transform) {
                    unsafe {
                        let super::super::super::wired::math::types::Transform {
                            rotation: rotation0,
                            scale: scale0,
                            translation: translation0,
                        } = value;
                        let super::super::super::wired::math::types::Quat {
                            x: x1,
                            y: y1,
                            z: z1,
                            w: w1,
                        } = rotation0;
                        let super::super::super::wired::math::types::Vec3 {
                            x: x2,
                            y: y2,
                            z: z2,
                        } = scale0;
                        let super::super::super::wired::math::types::Vec3 {
                            x: x3,
                            y: y3,
                            z: z3,
                        } = translation0;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-transform"]
                            fn wit_import(
                                _: i32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(x1),
                            _rt::as_f32(y1),
                            _rt::as_f32(z1),
                            _rt::as_f32(w1),
                            _rt::as_f32(x2),
                            _rt::as_f32(y2),
                            _rt::as_f32(z2),
                            _rt::as_f32(x3),
                            _rt::as_f32(y3),
                            _rt::as_f32(z3),
                        );
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn mesh(&self) -> Option<Mesh> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.mesh"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::gltf::mesh::Mesh::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_mesh(&self, value: Option<&Mesh>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-mesh"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn collider(&self) -> Option<Collider> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.collider"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::physics::types::Collider::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_collider(&self, value: Option<&Collider>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-collider"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn rigid_body(&self) -> Option<RigidBody> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.rigid-body"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::physics::types::RigidBody::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_rigid_body(&self, value: Option<&RigidBody>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-rigid-body"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_nodes() -> _rt::Vec<Node> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/node")]
                    extern "C" {
                        #[link_name = "list-nodes"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base4 = l1;
                    let len4 = l2;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 4);
                        let e4 = {
                            let l3 = *base.add(0).cast::<i32>();

                            Node::from_handle(l3 as u32)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 4, 4);
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_node() -> Node {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/node")]
                    extern "C" {
                        #[link_name = "create-node"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Node::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_node(value: Node) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/node")]
                    extern "C" {
                        #[link_name = "remove-node"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import((&value).take_handle() as i32);
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod log {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum LogLevel {
                Debug,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                    }
                }
            }

            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Info,
                        2 => LogLevel::Warn,
                        3 => LogLevel::Error,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn log(level: LogLevel, message: &str) {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:log/api")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: i32, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(level.clone() as i32, ptr0.cast_mut(), len0);
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod math {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Vec3 {
                pub x: f32,
                pub y: f32,
                pub z: f32,
            }
            impl ::core::fmt::Debug for Vec3 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Vec3")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .field("z", &self.z)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Quat {
                pub x: f32,
                pub y: f32,
                pub z: f32,
                pub w: f32,
            }
            impl ::core::fmt::Debug for Quat {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Quat")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .field("z", &self.z)
                        .field("w", &self.w)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Transform {
                pub rotation: Quat,
                pub scale: Vec3,
                pub translation: Vec3,
            }
            impl ::core::fmt::Debug for Transform {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Transform")
                        .field("rotation", &self.rotation)
                        .field("scale", &self.scale)
                        .field("translation", &self.translation)
                        .finish()
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod physics {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Vec3 = super::super::super::wired::math::types::Vec3;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Collider {
                handle: _rt::Resource<Collider>,
            }

            impl Collider {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Collider {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]collider"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Sphere {
                pub radius: f32,
            }
            impl ::core::fmt::Debug for Sphere {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Sphere")
                        .field("radius", &self.radius)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum Shape {
                Cuboid(Vec3),
                Sphere(Sphere),
            }
            impl ::core::fmt::Debug for Shape {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Shape::Cuboid(e) => f.debug_tuple("Shape::Cuboid").field(e).finish(),
                        Shape::Sphere(e) => f.debug_tuple("Shape::Sphere").field(e).finish(),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct RigidBody {
                handle: _rt::Resource<RigidBody>,
            }

            impl RigidBody {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for RigidBody {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]rigid-body"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum RigidBodyType {
                Dynamic,
                Fixed,
                Kinematic,
            }
            impl ::core::fmt::Debug for RigidBodyType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RigidBodyType::Dynamic => f.debug_tuple("RigidBodyType::Dynamic").finish(),
                        RigidBodyType::Fixed => f.debug_tuple("RigidBodyType::Fixed").finish(),
                        RigidBodyType::Kinematic => {
                            f.debug_tuple("RigidBodyType::Kinematic").finish()
                        }
                    }
                }
            }

            impl RigidBodyType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> RigidBodyType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => RigidBodyType::Dynamic,
                        1 => RigidBodyType::Fixed,
                        2 => RigidBodyType::Kinematic,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            impl Collider {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(shape: Shape) -> Self {
                    unsafe {
                        let (result2_0, result2_1, result2_2, result2_3) = match shape {
                            Shape::Cuboid(e) => {
                                let super::super::super::wired::math::types::Vec3 {
                                    x: x0,
                                    y: y0,
                                    z: z0,
                                } = e;

                                (0i32, _rt::as_f32(x0), _rt::as_f32(y0), _rt::as_f32(z0))
                            }
                            Shape::Sphere(e) => {
                                let Sphere { radius: radius1 } = e;

                                (1i32, _rt::as_f32(radius1), 0.0f32, 0.0f32)
                            }
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[constructor]collider"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(result2_0, result2_1, result2_2, result2_3);
                        Collider::from_handle(ret as u32)
                    }
                }
            }
            impl Collider {
                #[allow(unused_unsafe, clippy::all)]
                pub fn density(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]collider.density"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Collider {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_density(&self, value: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]collider.set-density"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&value));
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(rigid_body_type: RigidBodyType) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[constructor]rigid-body"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(rigid_body_type.clone() as i32);
                        RigidBody::from_handle(ret as u32)
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn angvel(&self) -> Vec3 {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.angvel"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        super::super::super::wired::math::types::Vec3 {
                            x: l1,
                            y: l2,
                            z: l3,
                        }
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_angvel(&self, value: Vec3) {
                    unsafe {
                        let super::super::super::wired::math::types::Vec3 {
                            x: x0,
                            y: y0,
                            z: z0,
                        } = value;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.set-angvel"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(x0),
                            _rt::as_f32(y0),
                            _rt::as_f32(z0),
                        );
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn linvel(&self) -> Vec3 {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.linvel"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        super::super::super::wired::math::types::Vec3 {
                            x: l1,
                            y: l2,
                            z: l3,
                        }
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_linvel(&self, value: Vec3) {
                    unsafe {
                        let super::super::super::wired::math::types::Vec3 {
                            x: x0,
                            y: y0,
                            z: z0,
                        } = value;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.set-linvel"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(x0),
                            _rt::as_f32(y0),
                            _rt::as_f32(z0),
                        );
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod wired {
        #[allow(dead_code)]
        pub mod script {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Script {
                    handle: _rt::Resource<Script>,
                }

                type _ScriptRep<T> = Option<T>;

                impl Script {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Script`.
                    pub fn new<T: GuestScript>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ScriptRep<T> = Some(val);
                        let ptr: *mut _ScriptRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestScript>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestScript>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestScript>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestScript` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ScriptRep<T>);
                    }

                    fn as_ptr<T: GuestScript>(&self) -> *mut _ScriptRep<T> {
                        Script::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Script`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ScriptBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Script>,
                }

                impl<'a> ScriptBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestScript>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ScriptRep<T> {
                        Script::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Script {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-drop]script"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_script_cabi<T: GuestScript>() -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = Script::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_script_update_cabi<T: GuestScript>(
                    arg0: *mut u8,
                    arg1: f32,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::update(ScriptBorrow::lift(arg0 as u32 as usize).get(), arg1);
                }
                pub trait Guest {
                    type Script: GuestScript;
                }
                pub trait GuestScript: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-new]script"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-rep]script"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new() -> Self;
                    /// Called every tick.
                    fn update(&self, delta: f32);
                }
                #[doc(hidden)]

                macro_rules! __export_wired_script_types_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "wired:script/types#[constructor]script"]
        unsafe extern "C" fn export_constructor_script() -> i32 {
          $($path_to_types)*::_export_constructor_script_cabi::<<$ty as $($path_to_types)*::Guest>::Script>()
        }
        #[export_name = "wired:script/types#[method]script.update"]
        unsafe extern "C" fn export_method_script_update(arg0: *mut u8,arg1: f32,) {
          $($path_to_types)*::_export_method_script_update_cabi::<<$ty as $($path_to_types)*::Guest>::Script>(arg0, arg1)
        }

        const _: () = {
          #[doc(hidden)]
          #[export_name = "wired:script/types#[dtor]script"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: *mut u8) {
            $($path_to_types)*::Script::dtor::<
            <$ty as $($path_to_types)*::Guest>::Script
            >(rep)
          }
        };

      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_wired_script_types_cabi;
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_script_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wired::script::types::__export_wired_script_types_cabi!($ty with_types_in $($path_to_types_root)*::exports::wired::script::types);
  )
}
#[doc(inline)]
pub(crate) use __export_script_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:script:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3117] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb0\x17\x01A\x02\x01\
A\x16\x01B\x16\x01r\x04\x01rv\x01gv\x01bv\x01av\x04\0\x05color\x03\0\0\x04\0\x08\
material\x03\x01\x01h\x02\x01@\x01\x04self\x03\0y\x04\0\x13[method]material.id\x01\
\x04\x01@\x01\x04self\x03\0s\x04\0\x15[method]material.name\x01\x05\x01@\x02\x04\
self\x03\x05values\x01\0\x04\0\x19[method]material.set-name\x01\x06\x01@\x01\x04\
self\x03\0\x01\x04\0\x16[method]material.color\x01\x07\x01@\x02\x04self\x03\x05v\
alue\x01\x01\0\x04\0\x1a[method]material.set-color\x01\x08\x01i\x02\x01p\x09\x01\
@\0\0\x0a\x04\0\x0elist-materials\x01\x0b\x01@\0\0\x09\x04\0\x0fcreate-material\x01\
\x0c\x01@\x01\x05value\x09\x01\0\x04\0\x0fremove-material\x01\x0d\x03\x01\x13wir\
ed:gltf/material\x05\0\x02\x03\0\0\x08material\x01B.\x02\x03\x02\x01\x01\x04\0\x08\
material\x03\0\0\x04\0\x09primitive\x03\x01\x04\0\x04mesh\x03\x01\x01h\x02\x01@\x01\
\x04self\x04\0y\x04\0\x14[method]primitive.id\x01\x05\x01i\x01\x01k\x06\x01@\x01\
\x04self\x04\0\x07\x04\0\x1a[method]primitive.material\x01\x08\x01h\x01\x01k\x09\
\x01@\x02\x04self\x04\x05value\x0a\x01\0\x04\0\x1e[method]primitive.set-material\
\x01\x0b\x01py\x01@\x02\x04self\x04\x05value\x0c\x01\0\x04\0\x1d[method]primitiv\
e.set-indices\x01\x0d\x01pv\x01@\x02\x04self\x04\x05value\x0e\x01\0\x04\0\x1d[me\
thod]primitive.set-normals\x01\x0f\x04\0\x1f[method]primitive.set-positions\x01\x0f\
\x04\0\x19[method]primitive.set-uvs\x01\x0f\x01h\x03\x01@\x01\x04self\x10\0y\x04\
\0\x0f[method]mesh.id\x01\x11\x01@\x01\x04self\x10\0s\x04\0\x11[method]mesh.name\
\x01\x12\x01@\x02\x04self\x10\x05values\x01\0\x04\0\x15[method]mesh.set-name\x01\
\x13\x01i\x02\x01p\x14\x01@\x01\x04self\x10\0\x15\x04\0\x1c[method]mesh.list-pri\
mitives\x01\x16\x01@\x01\x04self\x10\0\x14\x04\0\x1d[method]mesh.create-primitiv\
e\x01\x17\x01@\x02\x04self\x10\x05value\x14\x01\0\x04\0\x1d[method]mesh.remove-p\
rimitive\x01\x18\x01i\x03\x01p\x19\x01@\0\0\x1a\x04\0\x0blist-meshes\x01\x1b\x01\
@\0\0\x19\x04\0\x0bcreate-mesh\x01\x1c\x01@\x01\x05value\x19\x01\0\x04\0\x0bremo\
ve-mesh\x01\x1d\x03\x01\x0fwired:gltf/mesh\x05\x02\x01B\x06\x01r\x03\x01xv\x01yv\
\x01zv\x04\0\x04vec3\x03\0\0\x01r\x04\x01xv\x01yv\x01zv\x01wv\x04\0\x04quat\x03\0\
\x02\x01r\x03\x08rotation\x03\x05scale\x01\x0btranslation\x01\x04\0\x09transform\
\x03\0\x04\x03\x01\x10wired:math/types\x05\x03\x02\x03\0\x01\x04mesh\x02\x03\0\x02\
\x04vec3\x01B\x09\x02\x03\x02\x01\x04\x04\0\x04mesh\x03\0\0\x02\x03\x02\x01\x05\x04\
\0\x04vec3\x03\0\x02\x01i\x01\x01@\x01\x04size\x03\0\x04\x04\0\x0dcreate-cuboid\x01\
\x05\x01@\x03\x06radiusv\x07sectorsy\x06stacksy\0\x04\x04\0\x0dcreate-sphere\x01\
\x06\x03\x01\x10unavi:shapes/api\x05\x06\x01B\x1c\x02\x03\x02\x01\x05\x04\0\x04v\
ec3\x03\0\0\x04\0\x08collider\x03\x01\x01r\x01\x06radiusv\x04\0\x06sphere\x03\0\x03\
\x01q\x02\x06cuboid\x01\x01\0\x06sphere\x01\x04\0\x04\0\x05shape\x03\0\x05\x04\0\
\x0arigid-body\x03\x01\x01m\x03\x07dynamic\x05fixed\x09kinematic\x04\0\x0frigid-\
body-type\x03\0\x08\x01i\x02\x01@\x01\x05shape\x06\0\x0a\x04\0\x15[constructor]c\
ollider\x01\x0b\x01h\x02\x01@\x01\x04self\x0c\0v\x04\0\x18[method]collider.densi\
ty\x01\x0d\x01@\x02\x04self\x0c\x05valuev\x01\0\x04\0\x1c[method]collider.set-de\
nsity\x01\x0e\x01i\x07\x01@\x01\x0frigid-body-type\x09\0\x0f\x04\0\x17[construct\
or]rigid-body\x01\x10\x01h\x07\x01@\x01\x04self\x11\0\x01\x04\0\x19[method]rigid\
-body.angvel\x01\x12\x01@\x02\x04self\x11\x05value\x01\x01\0\x04\0\x1d[method]ri\
gid-body.set-angvel\x01\x13\x04\0\x19[method]rigid-body.linvel\x01\x12\x04\0\x1d\
[method]rigid-body.set-linvel\x01\x13\x03\x01\x13wired:physics/types\x05\x07\x02\
\x03\0\x02\x09transform\x02\x03\0\x04\x08collider\x02\x03\0\x04\x0arigid-body\x01\
B<\x02\x03\x02\x01\x04\x04\0\x04mesh\x03\0\0\x02\x03\x02\x01\x08\x04\0\x09transf\
orm\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x08collider\x03\0\x04\x02\x03\x02\x01\x0a\
\x04\0\x0arigid-body\x03\0\x06\x04\0\x04node\x03\x01\x01h\x08\x01@\x01\x04self\x09\
\0y\x04\0\x0f[method]node.id\x01\x0a\x01@\x01\x04self\x09\0s\x04\0\x11[method]no\
de.name\x01\x0b\x01@\x02\x04self\x09\x05values\x01\0\x04\0\x15[method]node.set-n\
ame\x01\x0c\x01i\x08\x01p\x0d\x01@\x01\x04self\x09\0\x0e\x04\0\x15[method]node.c\
hildren\x01\x0f\x01@\x02\x04self\x09\x05value\x09\x01\0\x04\0\x16[method]node.ad\
d-child\x01\x10\x04\0\x19[method]node.remove-child\x01\x10\x01k\x0d\x01@\x01\x04\
self\x09\0\x11\x04\0\x13[method]node.parent\x01\x12\x01@\x01\x04self\x09\0\x03\x04\
\0\x16[method]node.transform\x01\x13\x01@\x02\x04self\x09\x05value\x03\x01\0\x04\
\0\x1a[method]node.set-transform\x01\x14\x01i\x01\x01k\x15\x01@\x01\x04self\x09\0\
\x16\x04\0\x11[method]node.mesh\x01\x17\x01h\x01\x01k\x18\x01@\x02\x04self\x09\x05\
value\x19\x01\0\x04\0\x15[method]node.set-mesh\x01\x1a\x01i\x05\x01k\x1b\x01@\x01\
\x04self\x09\0\x1c\x04\0\x15[method]node.collider\x01\x1d\x01h\x05\x01k\x1e\x01@\
\x02\x04self\x09\x05value\x1f\x01\0\x04\0\x19[method]node.set-collider\x01\x20\x01\
i\x07\x01k!\x01@\x01\x04self\x09\0\"\x04\0\x17[method]node.rigid-body\x01#\x01h\x07\
\x01k$\x01@\x02\x04self\x09\x05value%\x01\0\x04\0\x1b[method]node.set-rigid-body\
\x01&\x01@\0\0\x0e\x04\0\x0alist-nodes\x01'\x01@\0\0\x0d\x04\0\x0bcreate-node\x01\
(\x01@\x01\x05value\x0d\x01\0\x04\0\x0bremove-node\x01)\x03\x01\x0fwired:gltf/no\
de\x05\x0b\x01B\x04\x01m\x04\x05debug\x04info\x04warn\x05error\x04\0\x09log-leve\
l\x03\0\0\x01@\x02\x05level\x01\x07messages\x01\0\x04\0\x03log\x01\x02\x03\x01\x0d\
wired:log/api\x05\x0c\x01B\x07\x04\0\x06script\x03\x01\x01i\0\x01@\0\0\x01\x04\0\
\x13[constructor]script\x01\x02\x01h\0\x01@\x02\x04self\x03\x05deltav\x01\0\x04\0\
\x15[method]script.update\x01\x04\x04\x01\x12wired:script/types\x05\x0d\x04\x01\x19\
example:wired-gltf/script\x04\0\x0b\x0c\x01\0\x06script\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
