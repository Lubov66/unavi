// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod unavi {
    #[allow(dead_code)]
    pub mod shapes {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Mesh = super::super::super::wired::gltf::mesh::Mesh;
            pub type Vec3 = super::super::super::wired::math::types::Vec3;
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_cuboid(size: Vec3) -> Mesh {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "unavi:shapes/api")]
                    extern "C" {
                        #[link_name = "create-cuboid"]
                        fn wit_import(_: i32) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import((&size).take_handle() as i32);
                    super::super::super::wired::gltf::mesh::Mesh::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Creates a UV sphere with the given number of
            /// longitudinal sectors and latitudinal stacks, aka horizontal and vertical resolution.
            ///
            /// A good default is `32` sectors and `18` stacks.
            pub fn create_sphere(radius: f32, sectors: u32, stacks: u32) -> Mesh {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "unavi:shapes/api")]
                    extern "C" {
                        #[link_name = "create-sphere"]
                        fn wit_import(_: f32, _: i32, _: i32) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: f32, _: i32, _: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        _rt::as_f32(&radius),
                        _rt::as_i32(&sectors),
                        _rt::as_i32(&stacks),
                    );
                    super::super::super::wired::gltf::mesh::Mesh::from_handle(ret as u32)
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wired {
    #[allow(dead_code)]
    pub mod gltf {
        #[allow(dead_code, clippy::all)]
        pub mod material {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Color {
                pub r: f32,
                pub g: f32,
                pub b: f32,
                pub a: f32,
            }
            impl ::core::fmt::Debug for Color {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Color")
                        .field("r", &self.r)
                        .field("g", &self.g)
                        .field("b", &self.b)
                        .field("a", &self.a)
                        .finish()
                }
            }
            /// A reference to a material.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Material {
                handle: _rt::Resource<Material>,
            }

            impl Material {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Material {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[resource-drop]material"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn color(&self) -> Color {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.color"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        let l4 = *ptr0.add(12).cast::<f32>();
                        Color {
                            r: l1,
                            g: l2,
                            b: l3,
                            a: l4,
                        }
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_color(&self, value: Color) {
                    unsafe {
                        let Color {
                            r: r0,
                            g: g0,
                            b: b0,
                            a: a0,
                        } = value;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/material")]
                        extern "C" {
                            #[link_name = "[method]material.set-color"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(r0),
                            _rt::as_f32(g0),
                            _rt::as_f32(b0),
                            _rt::as_f32(a0),
                        );
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_materials() -> _rt::Vec<Material> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/material")]
                    extern "C" {
                        #[link_name = "list-materials"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base4 = l1;
                    let len4 = l2;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 4);
                        let e4 = {
                            let l3 = *base.add(0).cast::<i32>();

                            Material::from_handle(l3 as u32)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 4, 4);
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_material() -> Material {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/material")]
                    extern "C" {
                        #[link_name = "create-material"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Material::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_material(value: Material) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/material")]
                    extern "C" {
                        #[link_name = "remove-material"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import((&value).take_handle() as i32);
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod mesh {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Material = super::super::super::wired::gltf::material::Material;
            /// A reference to a primitive.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Primitive {
                handle: _rt::Resource<Primitive>,
            }

            impl Primitive {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Primitive {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[resource-drop]primitive"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// A reference to a mesh.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Mesh {
                handle: _rt::Resource<Mesh>,
            }

            impl Mesh {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Mesh {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[resource-drop]mesh"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn material(&self) -> Option<Material> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.material"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::gltf::material::Material::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_material(&self, value: Option<&Material>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-material"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_indices(&self, value: &[u32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-indices"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_normals(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-normals"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_positions(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-positions"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_uvs(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-uvs"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_primitives(&self) -> _rt::Vec<Primitive> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.list-primitives"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Primitive::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn create_primitive(&self) -> Primitive {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.create-primitive"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Primitive::from_handle(ret as u32)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_primitive(&self, value: Primitive) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.remove-primitive"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (&value).take_handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_meshes() -> _rt::Vec<Mesh> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/mesh")]
                    extern "C" {
                        #[link_name = "list-meshes"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base4 = l1;
                    let len4 = l2;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 4);
                        let e4 = {
                            let l3 = *base.add(0).cast::<i32>();

                            Mesh::from_handle(l3 as u32)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 4, 4);
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_mesh() -> Mesh {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/mesh")]
                    extern "C" {
                        #[link_name = "create-mesh"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Mesh::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_mesh(value: Mesh) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/mesh")]
                    extern "C" {
                        #[link_name = "remove-mesh"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import((&value).take_handle() as i32);
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod node {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Mesh = super::super::super::wired::gltf::mesh::Mesh;
            pub type Transform = super::super::super::wired::math::types::Transform;
            /// A reference to a node.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Node {
                handle: _rt::Resource<Node>,
            }

            impl Node {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Node {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[resource-drop]node"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn children(&self) -> _rt::Vec<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.children"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Node::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_child(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.add-child"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_child(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.remove-child"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn parent(&self) -> Option<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.parent"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    Node::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn transform(&self) -> Transform {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.transform"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wired::math::types::Transform::from_handle(ret as u32)
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn mesh(&self) -> Option<Mesh> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.mesh"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::gltf::mesh::Mesh::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_mesh(&self, value: Option<&Mesh>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:gltf/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-mesh"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_nodes() -> _rt::Vec<Node> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/node")]
                    extern "C" {
                        #[link_name = "list-nodes"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base4 = l1;
                    let len4 = l2;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 4);
                        let e4 = {
                            let l3 = *base.add(0).cast::<i32>();

                            Node::from_handle(l3 as u32)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 4, 4);
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn create_node() -> Node {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/node")]
                    extern "C" {
                        #[link_name = "create-node"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Node::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn remove_node(value: Node) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:gltf/node")]
                    extern "C" {
                        #[link_name = "remove-node"]
                        fn wit_import(_: i32);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import((&value).take_handle() as i32);
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod log {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum LogLevel {
                Debug,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                    }
                }
            }

            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Info,
                        2 => LogLevel::Warn,
                        3 => LogLevel::Error,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn log(level: LogLevel, message: &str) {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:log/api")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: i32, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(level.clone() as i32, ptr0.cast_mut(), len0);
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod math {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Vec3 {
                handle: _rt::Resource<Vec3>,
            }

            impl Vec3 {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Vec3 {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]vec3"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Quat {
                handle: _rt::Resource<Quat>,
            }

            impl Quat {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Quat {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]quat"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Transform {
                handle: _rt::Resource<Transform>,
            }

            impl Transform {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Transform {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]transform"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(x: f32, y: f32, z: f32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[constructor]vec3"]
                            fn wit_import(_: f32, _: f32, _: f32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: f32, _: f32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(_rt::as_f32(&x), _rt::as_f32(&y), _rt::as_f32(&z));
                        Vec3::from_handle(ret as u32)
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn default() -> Vec3 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[static]vec3.default"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Vec3::from_handle(ret as u32)
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn splat(value: f32) -> Vec3 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[static]vec3.splat"]
                            fn wit_import(_: f32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(_rt::as_f32(&value));
                        Vec3::from_handle(ret as u32)
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn xyz(&self) -> (f32, f32, f32) {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.xyz"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        (l1, l2, l3)
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn x(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.x"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn y(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.y"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn z(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.z"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set(&self, x: f32, y: f32, z: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.set"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(&x),
                            _rt::as_f32(&y),
                            _rt::as_f32(&z),
                        );
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_x(&self, x: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.set-x"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&x));
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_y(&self, y: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.set-y"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&y));
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_z(&self, z: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.set-z"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&z));
                    }
                }
            }
            impl Vec3 {
                #[allow(unused_unsafe, clippy::all)]
                pub fn eq(&self, other: &Vec3) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]vec3.eq"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, (other).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(x: f32, y: f32, z: f32, w: f32) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[constructor]quat"]
                            fn wit_import(_: f32, _: f32, _: f32, _: f32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: f32, _: f32, _: f32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_f32(&x),
                            _rt::as_f32(&y),
                            _rt::as_f32(&z),
                            _rt::as_f32(&w),
                        );
                        Quat::from_handle(ret as u32)
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn default() -> Quat {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[static]quat.default"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Quat::from_handle(ret as u32)
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                /// Creates a quaternion from the `angle` (in radians) around the Y axis.
                pub fn from_rotation_y(angle: f32) -> Quat {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[static]quat.from-rotation-y"]
                            fn wit_import(_: f32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(_rt::as_f32(&angle));
                        Quat::from_handle(ret as u32)
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn xyzw(&self) -> (f32, f32, f32, f32) {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.xyzw"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        let l4 = *ptr0.add(12).cast::<f32>();
                        (l1, l2, l3, l4)
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn x(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.x"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn y(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.y"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn z(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.z"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn w(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.w"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set(&self, x: f32, y: f32, z: f32, w: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.set"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(&x),
                            _rt::as_f32(&y),
                            _rt::as_f32(&z),
                            _rt::as_f32(&w),
                        );
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_x(&self, x: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.set-x"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&x));
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_y(&self, y: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.set-y"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&y));
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_z(&self, z: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.set-z"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&z));
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_w(&self, w: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.set-w"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&w));
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn eq(&self, other: &Quat) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.eq"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, (other).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Quat {
                #[allow(unused_unsafe, clippy::all)]
                pub fn mul(&self, other: &Quat) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]quat.mul"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (other).handle() as i32);
                    }
                }
            }
            impl Transform {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(translation: Vec3, rotation: Quat, scale: Vec3) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[constructor]transform"]
                            fn wit_import(_: i32, _: i32, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (&translation).take_handle() as i32,
                            (&rotation).take_handle() as i32,
                            (&scale).take_handle() as i32,
                        );
                        Transform::from_handle(ret as u32)
                    }
                }
            }
            impl Transform {
                #[allow(unused_unsafe, clippy::all)]
                pub fn default() -> Transform {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[static]transform.default"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Transform::from_handle(ret as u32)
                    }
                }
            }
            impl Transform {
                #[allow(unused_unsafe, clippy::all)]
                pub fn rotation(&self) -> Quat {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]transform.rotation"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Quat::from_handle(ret as u32)
                    }
                }
            }
            impl Transform {
                #[allow(unused_unsafe, clippy::all)]
                pub fn scale(&self) -> Vec3 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]transform.scale"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Vec3::from_handle(ret as u32)
                    }
                }
            }
            impl Transform {
                #[allow(unused_unsafe, clippy::all)]
                pub fn translation(&self) -> Vec3 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]transform.translation"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Vec3::from_handle(ret as u32)
                    }
                }
            }
            impl Transform {
                #[allow(unused_unsafe, clippy::all)]
                pub fn eq(&self, other: &Transform) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:math/types")]
                        extern "C" {
                            #[link_name = "[method]transform.eq"]
                            fn wit_import(_: i32, _: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, (other).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod wired {
        #[allow(dead_code)]
        pub mod script {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Script {
                    handle: _rt::Resource<Script>,
                }

                type _ScriptRep<T> = Option<T>;

                impl Script {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Script`.
                    pub fn new<T: GuestScript>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ScriptRep<T> = Some(val);
                        let ptr: *mut _ScriptRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestScript>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestScript>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestScript>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestScript` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ScriptRep<T>);
                    }

                    fn as_ptr<T: GuestScript>(&self) -> *mut _ScriptRep<T> {
                        Script::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Script`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ScriptBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Script>,
                }

                impl<'a> ScriptBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestScript>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ScriptRep<T> {
                        Script::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Script {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-drop]script"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_script_cabi<T: GuestScript>() -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = Script::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_script_update_cabi<T: GuestScript>(
                    arg0: *mut u8,
                    arg1: f32,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::update(ScriptBorrow::lift(arg0 as u32 as usize).get(), arg1);
                }
                pub trait Guest {
                    type Script: GuestScript;
                }
                pub trait GuestScript: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-new]script"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-rep]script"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new() -> Self;
                    /// Called every tick.
                    fn update(&self, delta: f32);
                }
                #[doc(hidden)]

                macro_rules! __export_wired_script_types_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "wired:script/types#[constructor]script"]
        unsafe extern "C" fn export_constructor_script() -> i32 {
          $($path_to_types)*::_export_constructor_script_cabi::<<$ty as $($path_to_types)*::Guest>::Script>()
        }
        #[export_name = "wired:script/types#[method]script.update"]
        unsafe extern "C" fn export_method_script_update(arg0: *mut u8,arg1: f32,) {
          $($path_to_types)*::_export_method_script_update_cabi::<<$ty as $($path_to_types)*::Guest>::Script>(arg0, arg1)
        }

        const _: () = {
          #[doc(hidden)]
          #[export_name = "wired:script/types#[dtor]script"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: *mut u8) {
            $($path_to_types)*::Script::dtor::<
            <$ty as $($path_to_types)*::Guest>::Script
            >(rep)
          }
        };

      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_wired_script_types_cabi;
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_script_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wired::script::types::__export_wired_script_types_cabi!($ty with_types_in $($path_to_types_root)*::exports::wired::script::types);
  )
}
#[doc(inline)]
pub(crate) use __export_script_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:script:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3402] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xcd\x19\x01A\x02\x01\
A\x12\x01B\x16\x01r\x04\x01rv\x01gv\x01bv\x01av\x04\0\x05color\x03\0\0\x04\0\x08\
material\x03\x01\x01h\x02\x01@\x01\x04self\x03\0y\x04\0\x13[method]material.id\x01\
\x04\x01@\x01\x04self\x03\0s\x04\0\x15[method]material.name\x01\x05\x01@\x02\x04\
self\x03\x05values\x01\0\x04\0\x19[method]material.set-name\x01\x06\x01@\x01\x04\
self\x03\0\x01\x04\0\x16[method]material.color\x01\x07\x01@\x02\x04self\x03\x05v\
alue\x01\x01\0\x04\0\x1a[method]material.set-color\x01\x08\x01i\x02\x01p\x09\x01\
@\0\0\x0a\x04\0\x0elist-materials\x01\x0b\x01@\0\0\x09\x04\0\x0fcreate-material\x01\
\x0c\x01@\x01\x05value\x09\x01\0\x04\0\x0fremove-material\x01\x0d\x03\x01\x13wir\
ed:gltf/material\x05\0\x02\x03\0\0\x08material\x01B.\x02\x03\x02\x01\x01\x04\0\x08\
material\x03\0\0\x04\0\x09primitive\x03\x01\x04\0\x04mesh\x03\x01\x01h\x02\x01@\x01\
\x04self\x04\0y\x04\0\x14[method]primitive.id\x01\x05\x01i\x01\x01k\x06\x01@\x01\
\x04self\x04\0\x07\x04\0\x1a[method]primitive.material\x01\x08\x01h\x01\x01k\x09\
\x01@\x02\x04self\x04\x05value\x0a\x01\0\x04\0\x1e[method]primitive.set-material\
\x01\x0b\x01py\x01@\x02\x04self\x04\x05value\x0c\x01\0\x04\0\x1d[method]primitiv\
e.set-indices\x01\x0d\x01pv\x01@\x02\x04self\x04\x05value\x0e\x01\0\x04\0\x1d[me\
thod]primitive.set-normals\x01\x0f\x04\0\x1f[method]primitive.set-positions\x01\x0f\
\x04\0\x19[method]primitive.set-uvs\x01\x0f\x01h\x03\x01@\x01\x04self\x10\0y\x04\
\0\x0f[method]mesh.id\x01\x11\x01@\x01\x04self\x10\0s\x04\0\x11[method]mesh.name\
\x01\x12\x01@\x02\x04self\x10\x05values\x01\0\x04\0\x15[method]mesh.set-name\x01\
\x13\x01i\x02\x01p\x14\x01@\x01\x04self\x10\0\x15\x04\0\x1c[method]mesh.list-pri\
mitives\x01\x16\x01@\x01\x04self\x10\0\x14\x04\0\x1d[method]mesh.create-primitiv\
e\x01\x17\x01@\x02\x04self\x10\x05value\x14\x01\0\x04\0\x1d[method]mesh.remove-p\
rimitive\x01\x18\x01i\x03\x01p\x19\x01@\0\0\x1a\x04\0\x0blist-meshes\x01\x1b\x01\
@\0\0\x19\x04\0\x0bcreate-mesh\x01\x1c\x01@\x01\x05value\x19\x01\0\x04\0\x0bremo\
ve-mesh\x01\x1d\x03\x01\x0fwired:gltf/mesh\x05\x02\x01BG\x04\0\x04vec3\x03\x01\x04\
\0\x04quat\x03\x01\x04\0\x09transform\x03\x01\x01i\0\x01@\x03\x01xv\x01yv\x01zv\0\
\x03\x04\0\x11[constructor]vec3\x01\x04\x01@\0\0\x03\x04\0\x14[static]vec3.defau\
lt\x01\x05\x01@\x01\x05valuev\0\x03\x04\0\x12[static]vec3.splat\x01\x06\x01h\0\x01\
o\x03vvv\x01@\x01\x04self\x07\0\x08\x04\0\x10[method]vec3.xyz\x01\x09\x01@\x01\x04\
self\x07\0v\x04\0\x0e[method]vec3.x\x01\x0a\x04\0\x0e[method]vec3.y\x01\x0a\x04\0\
\x0e[method]vec3.z\x01\x0a\x01@\x04\x04self\x07\x01xv\x01yv\x01zv\x01\0\x04\0\x10\
[method]vec3.set\x01\x0b\x01@\x02\x04self\x07\x01xv\x01\0\x04\0\x12[method]vec3.\
set-x\x01\x0c\x01@\x02\x04self\x07\x01yv\x01\0\x04\0\x12[method]vec3.set-y\x01\x0d\
\x01@\x02\x04self\x07\x01zv\x01\0\x04\0\x12[method]vec3.set-z\x01\x0e\x01@\x02\x04\
self\x07\x05other\x07\0\x7f\x04\0\x0f[method]vec3.eq\x01\x0f\x01i\x01\x01@\x04\x01\
xv\x01yv\x01zv\x01wv\0\x10\x04\0\x11[constructor]quat\x01\x11\x01@\0\0\x10\x04\0\
\x14[static]quat.default\x01\x12\x01@\x01\x05anglev\0\x10\x04\0\x1c[static]quat.\
from-rotation-y\x01\x13\x01h\x01\x01o\x04vvvv\x01@\x01\x04self\x14\0\x15\x04\0\x11\
[method]quat.xyzw\x01\x16\x01@\x01\x04self\x14\0v\x04\0\x0e[method]quat.x\x01\x17\
\x04\0\x0e[method]quat.y\x01\x17\x04\0\x0e[method]quat.z\x01\x17\x04\0\x0e[metho\
d]quat.w\x01\x17\x01@\x05\x04self\x14\x01xv\x01yv\x01zv\x01wv\x01\0\x04\0\x10[me\
thod]quat.set\x01\x18\x01@\x02\x04self\x14\x01xv\x01\0\x04\0\x12[method]quat.set\
-x\x01\x19\x01@\x02\x04self\x14\x01yv\x01\0\x04\0\x12[method]quat.set-y\x01\x1a\x01\
@\x02\x04self\x14\x01zv\x01\0\x04\0\x12[method]quat.set-z\x01\x1b\x01@\x02\x04se\
lf\x14\x01wv\x01\0\x04\0\x12[method]quat.set-w\x01\x1c\x01@\x02\x04self\x14\x05o\
ther\x14\0\x7f\x04\0\x0f[method]quat.eq\x01\x1d\x01@\x02\x04self\x14\x05other\x14\
\x01\0\x04\0\x10[method]quat.mul\x01\x1e\x01i\x02\x01@\x03\x0btranslation\x03\x08\
rotation\x10\x05scale\x03\0\x1f\x04\0\x16[constructor]transform\x01\x20\x01@\0\0\
\x1f\x04\0\x19[static]transform.default\x01!\x01h\x02\x01@\x01\x04self\"\0\x10\x04\
\0\x1a[method]transform.rotation\x01#\x01@\x01\x04self\"\0\x03\x04\0\x17[method]\
transform.scale\x01$\x04\0\x1d[method]transform.translation\x01$\x01@\x02\x04sel\
f\"\x05other\"\0\x7f\x04\0\x14[method]transform.eq\x01%\x03\x01\x10wired:math/ty\
pes\x05\x03\x02\x03\0\x01\x04mesh\x02\x03\0\x02\x04vec3\x01B\x0a\x02\x03\x02\x01\
\x04\x04\0\x04mesh\x03\0\0\x02\x03\x02\x01\x05\x04\0\x04vec3\x03\0\x02\x01i\x03\x01\
i\x01\x01@\x01\x04size\x04\0\x05\x04\0\x0dcreate-cuboid\x01\x06\x01@\x03\x06radi\
usv\x07sectorsy\x06stacksy\0\x05\x04\0\x0dcreate-sphere\x01\x07\x03\x01\x10unavi\
:shapes/api\x05\x06\x02\x03\0\x02\x09transform\x01B'\x02\x03\x02\x01\x04\x04\0\x04\
mesh\x03\0\0\x02\x03\x02\x01\x07\x04\0\x09transform\x03\0\x02\x04\0\x04node\x03\x01\
\x01h\x04\x01@\x01\x04self\x05\0y\x04\0\x0f[method]node.id\x01\x06\x01@\x01\x04s\
elf\x05\0s\x04\0\x11[method]node.name\x01\x07\x01@\x02\x04self\x05\x05values\x01\
\0\x04\0\x15[method]node.set-name\x01\x08\x01i\x04\x01p\x09\x01@\x01\x04self\x05\
\0\x0a\x04\0\x15[method]node.children\x01\x0b\x01@\x02\x04self\x05\x05value\x05\x01\
\0\x04\0\x16[method]node.add-child\x01\x0c\x04\0\x19[method]node.remove-child\x01\
\x0c\x01k\x09\x01@\x01\x04self\x05\0\x0d\x04\0\x13[method]node.parent\x01\x0e\x01\
i\x03\x01@\x01\x04self\x05\0\x0f\x04\0\x16[method]node.transform\x01\x10\x01i\x01\
\x01k\x11\x01@\x01\x04self\x05\0\x12\x04\0\x11[method]node.mesh\x01\x13\x01h\x01\
\x01k\x14\x01@\x02\x04self\x05\x05value\x15\x01\0\x04\0\x15[method]node.set-mesh\
\x01\x16\x01@\0\0\x0a\x04\0\x0alist-nodes\x01\x17\x01@\0\0\x09\x04\0\x0bcreate-n\
ode\x01\x18\x01@\x01\x05value\x09\x01\0\x04\0\x0bremove-node\x01\x19\x03\x01\x0f\
wired:gltf/node\x05\x08\x01B\x04\x01m\x04\x05debug\x04info\x04warn\x05error\x04\0\
\x09log-level\x03\0\0\x01@\x02\x05level\x01\x07messages\x01\0\x04\0\x03log\x01\x02\
\x03\x01\x0dwired:log/api\x05\x09\x01B\x07\x04\0\x06script\x03\x01\x01i\0\x01@\0\
\0\x01\x04\0\x13[constructor]script\x01\x02\x01h\0\x01@\x02\x04self\x03\x05delta\
v\x01\0\x04\0\x15[method]script.update\x01\x04\x04\x01\x12wired:script/types\x05\
\x0a\x04\x01\x19example:wired-gltf/script\x04\0\x0b\x0c\x01\0\x06script\x03\0\0\0\
G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindge\
n-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
