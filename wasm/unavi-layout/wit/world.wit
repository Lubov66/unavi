package unavi:layout;

world guest {
    export container;
    export grid;
}

world prelude {
  import container;
  import grid;
}

interface container {
  use wired:math/types.{vec3};
  use wired:scene/node.{node};

  enum alignment {
    center,
    end,
    start,
  }

  // A 3D area of space.
  resource container {
    constructor(size: vec3);

    // Returns another reference to the same resource.
    ref: func() -> container;

    // The `root` node.
    // Positioned in the center of the container.
    root: func() -> node;

    // The `inner` node, child of the `root` node.
    // Positioned according to the `alignment` of the container.
    inner: func() -> node;

    size: func() -> vec3;
    set-size: func(value: vec3);

    align-x: func() -> alignment;
    align-y: func() -> alignment;
    align-z: func() -> alignment;

    set-align-x: func(value: alignment);
    set-align-y: func(value: alignment);
    set-align-z: func(value: alignment);
  }
}

interface grid {
  use container.{container};
  use wired:math/types.{vec3};

  // Creates a 3D grid of `container`s, with a set number of `rows` in each direction.
  resource grid {
    constructor(size: vec3, rows: vec3);

    // The `root` container.
    root: func() -> container;

    // List of all child containers.
    cells: func() -> list<container>;

    // Gets a specific cell from the grid.
    // Returns `none` if out of bounds.
    cell: func(x: u32, y: u32, z: u32) -> option<container>;

    rows: func() -> vec3;
    set-rows: func(value: vec3);
  }
}
