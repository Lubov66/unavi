package unavi:ui;

world guest {
    import unavi:shapes/api;
    import wired:log/api;

    export api;
    export button;
    export text;
}

world prelude {
  import api;
  import button;
  import text;
}

interface api {
  update-ui: func(delta: f32);
}

interface button {
  use unavi:layout/container.{container};
  use wired:input/handler.{input-handler};

  /// 3D interactable button.
  /// Fills the space of its root container.
  resource button {
    constructor(root: container);

    root: func() -> container;

    /// Returns `true` if the button was hovered over this frame.
    hovered: func() -> bool;

    /// Returns `true` if the button was pressed this frame.
    pressed: func() -> bool;
  }
}

interface text {
  use unavi:layout/container.{container};
  use wired:scene/mesh.{mesh};
  use wired:scene/node.{node};

  resource text {
    constructor(text: string);

    /// Returns another reference to the same resource.
    ref: func() -> text;

    /// Supports TrueType, OpenType, and AAT fonts.
    /// Will use a default font if none is provided.
    set-font: func(value: option<list<u8>>);

    text: func() -> string;
    set-text: func(value: string);

    font-size: func() -> f32;
    set-font-size: func(value: f32);

    thickness: func() -> f32;
    set-thickness: func(value: f32);

    mesh: func() -> mesh;
  }

  enum word-wrap {
    character,
    word,
  }

  /// Text generation within the bounds of a container.
  resource text-box {
    constructor(root: container);

    root: func() -> container;
    text: func() -> text;

    /// Sets the text after adjusting for container bounds.
    set-text: func(value: string);

    wrap: func() -> word-wrap;
    set-wrap: func(value: word-wrap);
  }
}
