// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod unavi {
    #[allow(dead_code)]
    pub mod vscreen {
        #[allow(dead_code, clippy::all)]
        pub mod screen {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Node = super::super::super::wired::scene::node::Node;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Screen {
                handle: _rt::Resource<Screen>,
            }

            impl Screen {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Screen {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[resource-drop]screen"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Module {
                handle: _rt::Resource<Module>,
            }

            impl Module {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Module {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[resource-drop]module"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Screen {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[constructor]screen"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Screen::from_handle(ret as u32)
                    }
                }
            }
            impl Screen {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_module(&self, module: Module) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[method]screen.add-module"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (&module).take_handle() as i32);
                    }
                }
            }
            impl Screen {
                #[allow(unused_unsafe, clippy::all)]
                pub fn visible(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[method]screen.visible"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Screen {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_visible(&self, value: bool) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[method]screen.set-visible"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            match &value {
                                true => 1,
                                false => 0,
                            },
                        );
                    }
                }
            }
            impl Screen {
                #[allow(unused_unsafe, clippy::all)]
                pub fn update(&self, delta: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[method]screen.update"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&delta));
                    }
                }
            }
            impl Module {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[constructor]module"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Module::from_handle(ret as u32)
                    }
                }
            }
            impl Module {
                #[allow(unused_unsafe, clippy::all)]
                pub fn root(&self) -> Node {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[method]module.root"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wired::scene::node::Node::from_handle(ret as u32)
                    }
                }
            }
            impl Module {
                #[allow(unused_unsafe, clippy::all)]
                pub fn update(&self, delta: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "unavi:vscreen/screen")]
                        extern "C" {
                            #[link_name = "[method]module.update"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&delta));
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wired {
    #[allow(dead_code)]
    pub mod input {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            pub type Vec3 = super::super::super::wired::math::types::Vec3;
            pub type Quat = super::super::super::wired::math::types::Quat;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum HandSide {
                Left,
                Right,
            }
            impl ::core::fmt::Debug for HandSide {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        HandSide::Left => f.debug_tuple("HandSide::Left").finish(),
                        HandSide::Right => f.debug_tuple("HandSide::Right").finish(),
                    }
                }
            }

            impl HandSide {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> HandSide {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => HandSide::Left,
                        1 => HandSide::Right,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Joint {
                pub translation: Vec3,
                pub rotation: Quat,
                pub radius: f32,
            }
            impl ::core::fmt::Debug for Joint {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Joint")
                        .field("translation", &self.translation)
                        .field("rotation", &self.rotation)
                        .field("radius", &self.radius)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Finger {
                pub tip: Joint,
                pub distal: Joint,
                pub proximal: Joint,
                pub metacarpal: Joint,
            }
            impl ::core::fmt::Debug for Finger {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Finger")
                        .field("tip", &self.tip)
                        .field("distal", &self.distal)
                        .field("proximal", &self.proximal)
                        .field("metacarpal", &self.metacarpal)
                        .finish()
                }
            }
            /// Hand tracking data.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Hand {
                pub side: HandSide,
                pub thumb: Finger,
                pub index: Finger,
                pub middle: Finger,
                pub ring: Finger,
                pub little: Finger,
                pub palm: Joint,
                pub wrist: Joint,
                pub elbow: Option<Joint>,
            }
            impl ::core::fmt::Debug for Hand {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Hand")
                        .field("side", &self.side)
                        .field("thumb", &self.thumb)
                        .field("index", &self.index)
                        .field("middle", &self.middle)
                        .field("ring", &self.ring)
                        .field("little", &self.little)
                        .field("palm", &self.palm)
                        .field("wrist", &self.wrist)
                        .field("elbow", &self.elbow)
                        .finish()
                }
            }
            /// A line with an origin and a direction.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Ray {
                pub origin: Vec3,
                pub orientation: Quat,
            }
            impl ::core::fmt::Debug for Ray {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Ray")
                        .field("origin", &self.origin)
                        .field("orientation", &self.orientation)
                        .finish()
                }
            }
            /// A single point of interaction, such as the tip of a stylus.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Tip {
                pub origin: Vec3,
                pub orientation: Quat,
                pub radius: f32,
            }
            impl ::core::fmt::Debug for Tip {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Tip")
                        .field("origin", &self.origin)
                        .field("orientation", &self.orientation)
                        .field("radius", &self.radius)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum InputType {
                Hand(Hand),
                Ray(Ray),
                Tip(Tip),
            }
            impl ::core::fmt::Debug for InputType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        InputType::Hand(e) => f.debug_tuple("InputType::Hand").field(e).finish(),
                        InputType::Ray(e) => f.debug_tuple("InputType::Ray").field(e).finish(),
                        InputType::Tip(e) => f.debug_tuple("InputType::Tip").field(e).finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct InputEvent {
                /// Unique id for the event.
                pub id: u64,
                /// Spatial input data.
                pub input: InputType,
                /// Distance from the input method to the handler.
                pub distance: f32,
                /// How many handlers received the event before this one.
                pub order: u32,
            }
            impl ::core::fmt::Debug for InputEvent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("InputEvent")
                        .field("id", &self.id)
                        .field("input", &self.input)
                        .field("distance", &self.distance)
                        .field("order", &self.order)
                        .finish()
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod handler {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type InputEvent = super::super::super::wired::input::types::InputEvent;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InputHandler {
                handle: _rt::Resource<InputHandler>,
            }

            impl InputHandler {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for InputHandler {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:input/handler")]
                        extern "C" {
                            #[link_name = "[resource-drop]input-handler"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl InputHandler {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:input/handler")]
                        extern "C" {
                            #[link_name = "[constructor]input-handler"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        InputHandler::from_handle(ret as u32)
                    }
                }
            }
            impl InputHandler {
                #[allow(unused_unsafe, clippy::all)]
                /// Handle the next recieved input event.
                /// Events only last for one tick.
                pub fn handle_input(&self) -> Option<InputEvent> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 776]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 776]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:input/handler")]
                        extern "C" {
                            #[link_name = "[method]input-handler.handle-input"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    let l3 = i32::from(*ptr0.add(16).cast::<u8>());
                                    use super::super::super::wired::input::types::InputType as V205;
                                    let v205 = match l3 {
                                        0 => {
                                            let e205 = {
                                                let l4 = i32::from(*ptr0.add(20).cast::<u8>());
                                                let l5 = *ptr0.add(24).cast::<f32>();
                                                let l6 = *ptr0.add(28).cast::<f32>();
                                                let l7 = *ptr0.add(32).cast::<f32>();
                                                let l8 = *ptr0.add(36).cast::<f32>();
                                                let l9 = *ptr0.add(40).cast::<f32>();
                                                let l10 = *ptr0.add(44).cast::<f32>();
                                                let l11 = *ptr0.add(48).cast::<f32>();
                                                let l12 = *ptr0.add(52).cast::<f32>();
                                                let l13 = *ptr0.add(56).cast::<f32>();
                                                let l14 = *ptr0.add(60).cast::<f32>();
                                                let l15 = *ptr0.add(64).cast::<f32>();
                                                let l16 = *ptr0.add(68).cast::<f32>();
                                                let l17 = *ptr0.add(72).cast::<f32>();
                                                let l18 = *ptr0.add(76).cast::<f32>();
                                                let l19 = *ptr0.add(80).cast::<f32>();
                                                let l20 = *ptr0.add(84).cast::<f32>();
                                                let l21 = *ptr0.add(88).cast::<f32>();
                                                let l22 = *ptr0.add(92).cast::<f32>();
                                                let l23 = *ptr0.add(96).cast::<f32>();
                                                let l24 = *ptr0.add(100).cast::<f32>();
                                                let l25 = *ptr0.add(104).cast::<f32>();
                                                let l26 = *ptr0.add(108).cast::<f32>();
                                                let l27 = *ptr0.add(112).cast::<f32>();
                                                let l28 = *ptr0.add(116).cast::<f32>();
                                                let l29 = *ptr0.add(120).cast::<f32>();
                                                let l30 = *ptr0.add(124).cast::<f32>();
                                                let l31 = *ptr0.add(128).cast::<f32>();
                                                let l32 = *ptr0.add(132).cast::<f32>();
                                                let l33 = *ptr0.add(136).cast::<f32>();
                                                let l34 = *ptr0.add(140).cast::<f32>();
                                                let l35 = *ptr0.add(144).cast::<f32>();
                                                let l36 = *ptr0.add(148).cast::<f32>();
                                                let l37 = *ptr0.add(152).cast::<f32>();
                                                let l38 = *ptr0.add(156).cast::<f32>();
                                                let l39 = *ptr0.add(160).cast::<f32>();
                                                let l40 = *ptr0.add(164).cast::<f32>();
                                                let l41 = *ptr0.add(168).cast::<f32>();
                                                let l42 = *ptr0.add(172).cast::<f32>();
                                                let l43 = *ptr0.add(176).cast::<f32>();
                                                let l44 = *ptr0.add(180).cast::<f32>();
                                                let l45 = *ptr0.add(184).cast::<f32>();
                                                let l46 = *ptr0.add(188).cast::<f32>();
                                                let l47 = *ptr0.add(192).cast::<f32>();
                                                let l48 = *ptr0.add(196).cast::<f32>();
                                                let l49 = *ptr0.add(200).cast::<f32>();
                                                let l50 = *ptr0.add(204).cast::<f32>();
                                                let l51 = *ptr0.add(208).cast::<f32>();
                                                let l52 = *ptr0.add(212).cast::<f32>();
                                                let l53 = *ptr0.add(216).cast::<f32>();
                                                let l54 = *ptr0.add(220).cast::<f32>();
                                                let l55 = *ptr0.add(224).cast::<f32>();
                                                let l56 = *ptr0.add(228).cast::<f32>();
                                                let l57 = *ptr0.add(232).cast::<f32>();
                                                let l58 = *ptr0.add(236).cast::<f32>();
                                                let l59 = *ptr0.add(240).cast::<f32>();
                                                let l60 = *ptr0.add(244).cast::<f32>();
                                                let l61 = *ptr0.add(248).cast::<f32>();
                                                let l62 = *ptr0.add(252).cast::<f32>();
                                                let l63 = *ptr0.add(256).cast::<f32>();
                                                let l64 = *ptr0.add(260).cast::<f32>();
                                                let l65 = *ptr0.add(264).cast::<f32>();
                                                let l66 = *ptr0.add(268).cast::<f32>();
                                                let l67 = *ptr0.add(272).cast::<f32>();
                                                let l68 = *ptr0.add(276).cast::<f32>();
                                                let l69 = *ptr0.add(280).cast::<f32>();
                                                let l70 = *ptr0.add(284).cast::<f32>();
                                                let l71 = *ptr0.add(288).cast::<f32>();
                                                let l72 = *ptr0.add(292).cast::<f32>();
                                                let l73 = *ptr0.add(296).cast::<f32>();
                                                let l74 = *ptr0.add(300).cast::<f32>();
                                                let l75 = *ptr0.add(304).cast::<f32>();
                                                let l76 = *ptr0.add(308).cast::<f32>();
                                                let l77 = *ptr0.add(312).cast::<f32>();
                                                let l78 = *ptr0.add(316).cast::<f32>();
                                                let l79 = *ptr0.add(320).cast::<f32>();
                                                let l80 = *ptr0.add(324).cast::<f32>();
                                                let l81 = *ptr0.add(328).cast::<f32>();
                                                let l82 = *ptr0.add(332).cast::<f32>();
                                                let l83 = *ptr0.add(336).cast::<f32>();
                                                let l84 = *ptr0.add(340).cast::<f32>();
                                                let l85 = *ptr0.add(344).cast::<f32>();
                                                let l86 = *ptr0.add(348).cast::<f32>();
                                                let l87 = *ptr0.add(352).cast::<f32>();
                                                let l88 = *ptr0.add(356).cast::<f32>();
                                                let l89 = *ptr0.add(360).cast::<f32>();
                                                let l90 = *ptr0.add(364).cast::<f32>();
                                                let l91 = *ptr0.add(368).cast::<f32>();
                                                let l92 = *ptr0.add(372).cast::<f32>();
                                                let l93 = *ptr0.add(376).cast::<f32>();
                                                let l94 = *ptr0.add(380).cast::<f32>();
                                                let l95 = *ptr0.add(384).cast::<f32>();
                                                let l96 = *ptr0.add(388).cast::<f32>();
                                                let l97 = *ptr0.add(392).cast::<f32>();
                                                let l98 = *ptr0.add(396).cast::<f32>();
                                                let l99 = *ptr0.add(400).cast::<f32>();
                                                let l100 = *ptr0.add(404).cast::<f32>();
                                                let l101 = *ptr0.add(408).cast::<f32>();
                                                let l102 = *ptr0.add(412).cast::<f32>();
                                                let l103 = *ptr0.add(416).cast::<f32>();
                                                let l104 = *ptr0.add(420).cast::<f32>();
                                                let l105 = *ptr0.add(424).cast::<f32>();
                                                let l106 = *ptr0.add(428).cast::<f32>();
                                                let l107 = *ptr0.add(432).cast::<f32>();
                                                let l108 = *ptr0.add(436).cast::<f32>();
                                                let l109 = *ptr0.add(440).cast::<f32>();
                                                let l110 = *ptr0.add(444).cast::<f32>();
                                                let l111 = *ptr0.add(448).cast::<f32>();
                                                let l112 = *ptr0.add(452).cast::<f32>();
                                                let l113 = *ptr0.add(456).cast::<f32>();
                                                let l114 = *ptr0.add(460).cast::<f32>();
                                                let l115 = *ptr0.add(464).cast::<f32>();
                                                let l116 = *ptr0.add(468).cast::<f32>();
                                                let l117 = *ptr0.add(472).cast::<f32>();
                                                let l118 = *ptr0.add(476).cast::<f32>();
                                                let l119 = *ptr0.add(480).cast::<f32>();
                                                let l120 = *ptr0.add(484).cast::<f32>();
                                                let l121 = *ptr0.add(488).cast::<f32>();
                                                let l122 = *ptr0.add(492).cast::<f32>();
                                                let l123 = *ptr0.add(496).cast::<f32>();
                                                let l124 = *ptr0.add(500).cast::<f32>();
                                                let l125 = *ptr0.add(504).cast::<f32>();
                                                let l126 = *ptr0.add(508).cast::<f32>();
                                                let l127 = *ptr0.add(512).cast::<f32>();
                                                let l128 = *ptr0.add(516).cast::<f32>();
                                                let l129 = *ptr0.add(520).cast::<f32>();
                                                let l130 = *ptr0.add(524).cast::<f32>();
                                                let l131 = *ptr0.add(528).cast::<f32>();
                                                let l132 = *ptr0.add(532).cast::<f32>();
                                                let l133 = *ptr0.add(536).cast::<f32>();
                                                let l134 = *ptr0.add(540).cast::<f32>();
                                                let l135 = *ptr0.add(544).cast::<f32>();
                                                let l136 = *ptr0.add(548).cast::<f32>();
                                                let l137 = *ptr0.add(552).cast::<f32>();
                                                let l138 = *ptr0.add(556).cast::<f32>();
                                                let l139 = *ptr0.add(560).cast::<f32>();
                                                let l140 = *ptr0.add(564).cast::<f32>();
                                                let l141 = *ptr0.add(568).cast::<f32>();
                                                let l142 = *ptr0.add(572).cast::<f32>();
                                                let l143 = *ptr0.add(576).cast::<f32>();
                                                let l144 = *ptr0.add(580).cast::<f32>();
                                                let l145 = *ptr0.add(584).cast::<f32>();
                                                let l146 = *ptr0.add(588).cast::<f32>();
                                                let l147 = *ptr0.add(592).cast::<f32>();
                                                let l148 = *ptr0.add(596).cast::<f32>();
                                                let l149 = *ptr0.add(600).cast::<f32>();
                                                let l150 = *ptr0.add(604).cast::<f32>();
                                                let l151 = *ptr0.add(608).cast::<f32>();
                                                let l152 = *ptr0.add(612).cast::<f32>();
                                                let l153 = *ptr0.add(616).cast::<f32>();
                                                let l154 = *ptr0.add(620).cast::<f32>();
                                                let l155 = *ptr0.add(624).cast::<f32>();
                                                let l156 = *ptr0.add(628).cast::<f32>();
                                                let l157 = *ptr0.add(632).cast::<f32>();
                                                let l158 = *ptr0.add(636).cast::<f32>();
                                                let l159 = *ptr0.add(640).cast::<f32>();
                                                let l160 = *ptr0.add(644).cast::<f32>();
                                                let l161 = *ptr0.add(648).cast::<f32>();
                                                let l162 = *ptr0.add(652).cast::<f32>();
                                                let l163 = *ptr0.add(656).cast::<f32>();
                                                let l164 = *ptr0.add(660).cast::<f32>();
                                                let l165 = *ptr0.add(664).cast::<f32>();
                                                let l166 = *ptr0.add(668).cast::<f32>();
                                                let l167 = *ptr0.add(672).cast::<f32>();
                                                let l168 = *ptr0.add(676).cast::<f32>();
                                                let l169 = *ptr0.add(680).cast::<f32>();
                                                let l170 = *ptr0.add(684).cast::<f32>();
                                                let l171 = *ptr0.add(688).cast::<f32>();
                                                let l172 = *ptr0.add(692).cast::<f32>();
                                                let l173 = *ptr0.add(696).cast::<f32>();
                                                let l174 = *ptr0.add(700).cast::<f32>();
                                                let l175 = *ptr0.add(704).cast::<f32>();
                                                let l176 = *ptr0.add(708).cast::<f32>();
                                                let l177 = *ptr0.add(712).cast::<f32>();
                                                let l178 = *ptr0.add(716).cast::<f32>();
                                                let l179 = *ptr0.add(720).cast::<f32>();
                                                let l180 = *ptr0.add(724).cast::<f32>();
                                                let l181 = i32::from(*ptr0.add(728).cast::<u8>());

                                                super::super::super::wired::input::types::Hand{
                          side: super::super::super::wired::input::types::HandSide::_lift(l4 as u8),
                          thumb: super::super::super::wired::input::types::Finger{
                            tip: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l5,
                                y: l6,
                                z: l7,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l8,
                                y: l9,
                                z: l10,
                                w: l11,
                              },
                              radius: l12,
                            },
                            distal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l13,
                                y: l14,
                                z: l15,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l16,
                                y: l17,
                                z: l18,
                                w: l19,
                              },
                              radius: l20,
                            },
                            proximal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l21,
                                y: l22,
                                z: l23,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l24,
                                y: l25,
                                z: l26,
                                w: l27,
                              },
                              radius: l28,
                            },
                            metacarpal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l29,
                                y: l30,
                                z: l31,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l32,
                                y: l33,
                                z: l34,
                                w: l35,
                              },
                              radius: l36,
                            },
                          },
                          index: super::super::super::wired::input::types::Finger{
                            tip: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l37,
                                y: l38,
                                z: l39,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l40,
                                y: l41,
                                z: l42,
                                w: l43,
                              },
                              radius: l44,
                            },
                            distal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l45,
                                y: l46,
                                z: l47,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l48,
                                y: l49,
                                z: l50,
                                w: l51,
                              },
                              radius: l52,
                            },
                            proximal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l53,
                                y: l54,
                                z: l55,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l56,
                                y: l57,
                                z: l58,
                                w: l59,
                              },
                              radius: l60,
                            },
                            metacarpal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l61,
                                y: l62,
                                z: l63,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l64,
                                y: l65,
                                z: l66,
                                w: l67,
                              },
                              radius: l68,
                            },
                          },
                          middle: super::super::super::wired::input::types::Finger{
                            tip: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l69,
                                y: l70,
                                z: l71,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l72,
                                y: l73,
                                z: l74,
                                w: l75,
                              },
                              radius: l76,
                            },
                            distal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l77,
                                y: l78,
                                z: l79,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l80,
                                y: l81,
                                z: l82,
                                w: l83,
                              },
                              radius: l84,
                            },
                            proximal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l85,
                                y: l86,
                                z: l87,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l88,
                                y: l89,
                                z: l90,
                                w: l91,
                              },
                              radius: l92,
                            },
                            metacarpal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l93,
                                y: l94,
                                z: l95,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l96,
                                y: l97,
                                z: l98,
                                w: l99,
                              },
                              radius: l100,
                            },
                          },
                          ring: super::super::super::wired::input::types::Finger{
                            tip: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l101,
                                y: l102,
                                z: l103,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l104,
                                y: l105,
                                z: l106,
                                w: l107,
                              },
                              radius: l108,
                            },
                            distal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l109,
                                y: l110,
                                z: l111,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l112,
                                y: l113,
                                z: l114,
                                w: l115,
                              },
                              radius: l116,
                            },
                            proximal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l117,
                                y: l118,
                                z: l119,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l120,
                                y: l121,
                                z: l122,
                                w: l123,
                              },
                              radius: l124,
                            },
                            metacarpal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l125,
                                y: l126,
                                z: l127,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l128,
                                y: l129,
                                z: l130,
                                w: l131,
                              },
                              radius: l132,
                            },
                          },
                          little: super::super::super::wired::input::types::Finger{
                            tip: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l133,
                                y: l134,
                                z: l135,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l136,
                                y: l137,
                                z: l138,
                                w: l139,
                              },
                              radius: l140,
                            },
                            distal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l141,
                                y: l142,
                                z: l143,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l144,
                                y: l145,
                                z: l146,
                                w: l147,
                              },
                              radius: l148,
                            },
                            proximal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l149,
                                y: l150,
                                z: l151,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l152,
                                y: l153,
                                z: l154,
                                w: l155,
                              },
                              radius: l156,
                            },
                            metacarpal: super::super::super::wired::input::types::Joint{
                              translation: super::super::super::wired::math::types::Vec3{
                                x: l157,
                                y: l158,
                                z: l159,
                              },
                              rotation: super::super::super::wired::math::types::Quat{
                                x: l160,
                                y: l161,
                                z: l162,
                                w: l163,
                              },
                              radius: l164,
                            },
                          },
                          palm: super::super::super::wired::input::types::Joint{
                            translation: super::super::super::wired::math::types::Vec3{
                              x: l165,
                              y: l166,
                              z: l167,
                            },
                            rotation: super::super::super::wired::math::types::Quat{
                              x: l168,
                              y: l169,
                              z: l170,
                              w: l171,
                            },
                            radius: l172,
                          },
                          wrist: super::super::super::wired::input::types::Joint{
                            translation: super::super::super::wired::math::types::Vec3{
                              x: l173,
                              y: l174,
                              z: l175,
                            },
                            rotation: super::super::super::wired::math::types::Quat{
                              x: l176,
                              y: l177,
                              z: l178,
                              w: l179,
                            },
                            radius: l180,
                          },
                          elbow: match l181 {
                            0 => None,
                            1 => {
                              let e = {
                                let l182 = *ptr0.add(732).cast::<f32>();
                                let l183 = *ptr0.add(736).cast::<f32>();
                                let l184 = *ptr0.add(740).cast::<f32>();
                                let l185 = *ptr0.add(744).cast::<f32>();
                                let l186 = *ptr0.add(748).cast::<f32>();
                                let l187 = *ptr0.add(752).cast::<f32>();
                                let l188 = *ptr0.add(756).cast::<f32>();
                                let l189 = *ptr0.add(760).cast::<f32>();

                                super::super::super::wired::input::types::Joint{
                                  translation: super::super::super::wired::math::types::Vec3{
                                    x: l182,
                                    y: l183,
                                    z: l184,
                                  },
                                  rotation: super::super::super::wired::math::types::Quat{
                                    x: l185,
                                    y: l186,
                                    z: l187,
                                    w: l188,
                                  },
                                  radius: l189,
                                }
                              };
                              Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                          },
                        }
                                            };
                                            V205::Hand(e205)
                                        }
                                        1 => {
                                            let e205 = {
                                                let l190 = *ptr0.add(20).cast::<f32>();
                                                let l191 = *ptr0.add(24).cast::<f32>();
                                                let l192 = *ptr0.add(28).cast::<f32>();
                                                let l193 = *ptr0.add(32).cast::<f32>();
                                                let l194 = *ptr0.add(36).cast::<f32>();
                                                let l195 = *ptr0.add(40).cast::<f32>();
                                                let l196 = *ptr0.add(44).cast::<f32>();

                                                super::super::super::wired::input::types::Ray{
                          origin: super::super::super::wired::math::types::Vec3{
                            x: l190,
                            y: l191,
                            z: l192,
                          },
                          orientation: super::super::super::wired::math::types::Quat{
                            x: l193,
                            y: l194,
                            z: l195,
                            w: l196,
                          },
                        }
                                            };
                                            V205::Ray(e205)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e205 = {
                                                let l197 = *ptr0.add(20).cast::<f32>();
                                                let l198 = *ptr0.add(24).cast::<f32>();
                                                let l199 = *ptr0.add(28).cast::<f32>();
                                                let l200 = *ptr0.add(32).cast::<f32>();
                                                let l201 = *ptr0.add(36).cast::<f32>();
                                                let l202 = *ptr0.add(40).cast::<f32>();
                                                let l203 = *ptr0.add(44).cast::<f32>();
                                                let l204 = *ptr0.add(48).cast::<f32>();

                                                super::super::super::wired::input::types::Tip{
                          origin: super::super::super::wired::math::types::Vec3{
                            x: l197,
                            y: l198,
                            z: l199,
                          },
                          orientation: super::super::super::wired::math::types::Quat{
                            x: l200,
                            y: l201,
                            z: l202,
                            w: l203,
                          },
                          radius: l204,
                        }
                                            };
                                            V205::Tip(e205)
                                        }
                                    };
                                    let l206 = *ptr0.add(764).cast::<f32>();
                                    let l207 = *ptr0.add(768).cast::<i32>();

                                    super::super::super::wired::input::types::InputEvent {
                                        id: l2 as u64,
                                        input: v205,
                                        distance: l206,
                                        order: l207 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod log {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum LogLevel {
                Debug,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                    }
                }
            }

            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Info,
                        2 => LogLevel::Warn,
                        3 => LogLevel::Error,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn log(level: LogLevel, message: &str) {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:log/api")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: i32, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(level.clone() as i32, ptr0.cast_mut(), len0);
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod math {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Vec2 {
                pub x: f32,
                pub y: f32,
            }
            impl ::core::fmt::Debug for Vec2 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Vec2")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Vec3 {
                pub x: f32,
                pub y: f32,
                pub z: f32,
            }
            impl ::core::fmt::Debug for Vec3 {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Vec3")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .field("z", &self.z)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Quat {
                pub x: f32,
                pub y: f32,
                pub z: f32,
                pub w: f32,
            }
            impl ::core::fmt::Debug for Quat {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Quat")
                        .field("x", &self.x)
                        .field("y", &self.y)
                        .field("z", &self.z)
                        .field("w", &self.w)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Transform {
                pub rotation: Quat,
                pub scale: Vec3,
                pub translation: Vec3,
            }
            impl ::core::fmt::Debug for Transform {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Transform")
                        .field("rotation", &self.rotation)
                        .field("scale", &self.scale)
                        .field("translation", &self.translation)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Codegen doesn't always include vec2, add this function to force its inclusion.
            pub fn fake_fn() -> Vec2 {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:math/types")]
                    extern "C" {
                        #[link_name = "fake-fn"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<f32>();
                    let l2 = *ptr0.add(4).cast::<f32>();
                    Vec2 { x: l1, y: l2 }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod physics {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Vec3 = super::super::super::wired::math::types::Vec3;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Collider {
                handle: _rt::Resource<Collider>,
            }

            impl Collider {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Collider {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]collider"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ShapeCylinder {
                pub height: f32,
                pub radius: f32,
            }
            impl ::core::fmt::Debug for ShapeCylinder {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ShapeCylinder")
                        .field("height", &self.height)
                        .field("radius", &self.radius)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum Shape {
                Cuboid(Vec3),
                Cylinder(ShapeCylinder),
                Sphere(f32),
            }
            impl ::core::fmt::Debug for Shape {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Shape::Cuboid(e) => f.debug_tuple("Shape::Cuboid").field(e).finish(),
                        Shape::Cylinder(e) => f.debug_tuple("Shape::Cylinder").field(e).finish(),
                        Shape::Sphere(e) => f.debug_tuple("Shape::Sphere").field(e).finish(),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct RigidBody {
                handle: _rt::Resource<RigidBody>,
            }

            impl RigidBody {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for RigidBody {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[resource-drop]rigid-body"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum RigidBodyType {
                Dynamic,
                Fixed,
                Kinematic,
            }
            impl ::core::fmt::Debug for RigidBodyType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RigidBodyType::Dynamic => f.debug_tuple("RigidBodyType::Dynamic").finish(),
                        RigidBodyType::Fixed => f.debug_tuple("RigidBodyType::Fixed").finish(),
                        RigidBodyType::Kinematic => {
                            f.debug_tuple("RigidBodyType::Kinematic").finish()
                        }
                    }
                }
            }

            impl RigidBodyType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> RigidBodyType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => RigidBodyType::Dynamic,
                        1 => RigidBodyType::Fixed,
                        2 => RigidBodyType::Kinematic,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            impl Collider {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(shape: Shape) -> Self {
                    unsafe {
                        let (result2_0, result2_1, result2_2, result2_3) = match shape {
                            Shape::Cuboid(e) => {
                                let super::super::super::wired::math::types::Vec3 {
                                    x: x0,
                                    y: y0,
                                    z: z0,
                                } = e;

                                (0i32, _rt::as_f32(x0), _rt::as_f32(y0), _rt::as_f32(z0))
                            }
                            Shape::Cylinder(e) => {
                                let ShapeCylinder {
                                    height: height1,
                                    radius: radius1,
                                } = e;

                                (1i32, _rt::as_f32(height1), _rt::as_f32(radius1), 0.0f32)
                            }
                            Shape::Sphere(e) => (2i32, _rt::as_f32(e), 0.0f32, 0.0f32),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[constructor]collider"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(result2_0, result2_1, result2_2, result2_3);
                        Collider::from_handle(ret as u32)
                    }
                }
            }
            impl Collider {
                #[allow(unused_unsafe, clippy::all)]
                pub fn density(&self) -> f32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]collider.density"]
                            fn wit_import(_: i32) -> f32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> f32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret
                    }
                }
            }
            impl Collider {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_density(&self, value: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]collider.set-density"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&value));
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(rigid_body_type: RigidBodyType) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[constructor]rigid-body"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(rigid_body_type.clone() as i32);
                        RigidBody::from_handle(ret as u32)
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn angvel(&self) -> Vec3 {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.angvel"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        super::super::super::wired::math::types::Vec3 {
                            x: l1,
                            y: l2,
                            z: l3,
                        }
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_angvel(&self, value: Vec3) {
                    unsafe {
                        let super::super::super::wired::math::types::Vec3 {
                            x: x0,
                            y: y0,
                            z: z0,
                        } = value;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.set-angvel"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(x0),
                            _rt::as_f32(y0),
                            _rt::as_f32(z0),
                        );
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn linvel(&self) -> Vec3 {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.linvel"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        super::super::super::wired::math::types::Vec3 {
                            x: l1,
                            y: l2,
                            z: l3,
                        }
                    }
                }
            }
            impl RigidBody {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_linvel(&self, value: Vec3) {
                    unsafe {
                        let super::super::super::wired::math::types::Vec3 {
                            x: x0,
                            y: y0,
                            z: z0,
                        } = value;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:physics/types")]
                        extern "C" {
                            #[link_name = "[method]rigid-body.set-linvel"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(x0),
                            _rt::as_f32(y0),
                            _rt::as_f32(z0),
                        );
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod player {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Node = super::super::super::wired::scene::node::Node;
            pub struct Skeleton {
                pub head: Node,
                pub spine: Node,
                pub hips: Node,
                pub left_upper_arm: Node,
                pub left_lower_arm: Node,
                pub left_hand: Node,
                pub right_upper_arm: Node,
                pub right_lower_arm: Node,
                pub right_hand: Node,
                pub left_upper_leg: Node,
                pub left_lower_leg: Node,
                pub left_foot: Node,
                pub right_upper_leg: Node,
                pub right_lower_leg: Node,
                pub right_foot: Node,
            }
            impl ::core::fmt::Debug for Skeleton {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Skeleton")
                        .field("head", &self.head)
                        .field("spine", &self.spine)
                        .field("hips", &self.hips)
                        .field("left-upper-arm", &self.left_upper_arm)
                        .field("left-lower-arm", &self.left_lower_arm)
                        .field("left-hand", &self.left_hand)
                        .field("right-upper-arm", &self.right_upper_arm)
                        .field("right-lower-arm", &self.right_lower_arm)
                        .field("right-hand", &self.right_hand)
                        .field("left-upper-leg", &self.left_upper_leg)
                        .field("left-lower-leg", &self.left_lower_leg)
                        .field("left-foot", &self.left_foot)
                        .field("right-upper-leg", &self.right_upper_leg)
                        .field("right-lower-leg", &self.right_lower_leg)
                        .field("right-foot", &self.right_foot)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Player {
                handle: _rt::Resource<Player>,
            }

            impl Player {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Player {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:player/api")]
                        extern "C" {
                            #[link_name = "[resource-drop]player"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Player {
                #[allow(unused_unsafe, clippy::all)]
                pub fn skeleton(&self) -> Skeleton {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 60]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 60]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:player/api")]
                        extern "C" {
                            #[link_name = "[method]player.skeleton"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<i32>();
                        let l2 = *ptr0.add(4).cast::<i32>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let l4 = *ptr0.add(12).cast::<i32>();
                        let l5 = *ptr0.add(16).cast::<i32>();
                        let l6 = *ptr0.add(20).cast::<i32>();
                        let l7 = *ptr0.add(24).cast::<i32>();
                        let l8 = *ptr0.add(28).cast::<i32>();
                        let l9 = *ptr0.add(32).cast::<i32>();
                        let l10 = *ptr0.add(36).cast::<i32>();
                        let l11 = *ptr0.add(40).cast::<i32>();
                        let l12 = *ptr0.add(44).cast::<i32>();
                        let l13 = *ptr0.add(48).cast::<i32>();
                        let l14 = *ptr0.add(52).cast::<i32>();
                        let l15 = *ptr0.add(56).cast::<i32>();
                        Skeleton {
                            head: super::super::super::wired::scene::node::Node::from_handle(
                                l1 as u32,
                            ),
                            spine: super::super::super::wired::scene::node::Node::from_handle(
                                l2 as u32,
                            ),
                            hips: super::super::super::wired::scene::node::Node::from_handle(
                                l3 as u32,
                            ),
                            left_upper_arm:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l4 as u32,
                                ),
                            left_lower_arm:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l5 as u32,
                                ),
                            left_hand: super::super::super::wired::scene::node::Node::from_handle(
                                l6 as u32,
                            ),
                            right_upper_arm:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l7 as u32,
                                ),
                            right_lower_arm:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l8 as u32,
                                ),
                            right_hand: super::super::super::wired::scene::node::Node::from_handle(
                                l9 as u32,
                            ),
                            left_upper_leg:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l10 as u32,
                                ),
                            left_lower_leg:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l11 as u32,
                                ),
                            left_foot: super::super::super::wired::scene::node::Node::from_handle(
                                l12 as u32,
                            ),
                            right_upper_leg:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l13 as u32,
                                ),
                            right_lower_leg:
                                super::super::super::wired::scene::node::Node::from_handle(
                                    l14 as u32,
                                ),
                            right_foot: super::super::super::wired::scene::node::Node::from_handle(
                                l15 as u32,
                            ),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn list_players() -> _rt::Vec<Player> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:player/api")]
                    extern "C" {
                        #[link_name = "list-players"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<*mut u8>();
                    let l2 = *ptr0.add(4).cast::<usize>();
                    let base4 = l1;
                    let len4 = l2;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 4);
                        let e4 = {
                            let l3 = *base.add(0).cast::<i32>();

                            Player::from_handle(l3 as u32)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 4, 4);
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn local_player() -> Player {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:player/api")]
                    extern "C" {
                        #[link_name = "local-player"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Player::from_handle(ret as u32)
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod scene {
        #[allow(dead_code, clippy::all)]
        pub mod material {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Color {
                pub r: f32,
                pub g: f32,
                pub b: f32,
                pub a: f32,
            }
            impl ::core::fmt::Debug for Color {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Color")
                        .field("r", &self.r)
                        .field("g", &self.g)
                        .field("b", &self.b)
                        .field("a", &self.a)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Material {
                handle: _rt::Resource<Material>,
            }

            impl Material {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Material {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[resource-drop]material"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[constructor]material"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Material::from_handle(ret as u32)
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[method]material.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns another reference to the same resource.
                pub fn ref_(&self) -> Material {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[method]material.ref"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Material::from_handle(ret as u32)
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[method]material.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[method]material.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn color(&self) -> Color {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[method]material.color"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        let l4 = *ptr0.add(12).cast::<f32>();
                        Color {
                            r: l1,
                            g: l2,
                            b: l3,
                            a: l4,
                        }
                    }
                }
            }
            impl Material {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_color(&self, value: Color) {
                    unsafe {
                        let Color {
                            r: r0,
                            g: g0,
                            b: b0,
                            a: a0,
                        } = value;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/material")]
                        extern "C" {
                            #[link_name = "[method]material.set-color"]
                            fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32, _: f32, _: f32, _: f32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(r0),
                            _rt::as_f32(g0),
                            _rt::as_f32(b0),
                            _rt::as_f32(a0),
                        );
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod mesh {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Material = super::super::super::wired::scene::material::Material;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Primitive {
                handle: _rt::Resource<Primitive>,
            }

            impl Primitive {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Primitive {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[resource-drop]primitive"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Mesh {
                handle: _rt::Resource<Mesh>,
            }

            impl Mesh {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Mesh {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[resource-drop]mesh"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn material(&self) -> Option<Material> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.material"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::scene::material::Material::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_material(&self, value: Option<&Material>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-material"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_indices(&self, value: &[u32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-indices"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_normals(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-normals"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_positions(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-positions"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Primitive {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_uvs(&self, value: &[f32]) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]primitive.set-uvs"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[constructor]mesh"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Mesh::from_handle(ret as u32)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns another reference to the same resource.
                pub fn ref_(&self) -> Mesh {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.ref"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Mesh::from_handle(ret as u32)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_primitives(&self) -> _rt::Vec<Primitive> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.list-primitives"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Primitive::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn create_primitive(&self) -> Primitive {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.create-primitive"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Primitive::from_handle(ret as u32)
                    }
                }
            }
            impl Mesh {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_primitive(&self, value: Primitive) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/mesh")]
                        extern "C" {
                            #[link_name = "[method]mesh.remove-primitive"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (&value).take_handle() as i32);
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod node {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Mesh = super::super::super::wired::scene::mesh::Mesh;
            pub type InputHandler = super::super::super::wired::input::handler::InputHandler;
            pub type Transform = super::super::super::wired::math::types::Transform;
            pub type Collider = super::super::super::wired::physics::types::Collider;
            pub type RigidBody = super::super::super::wired::physics::types::RigidBody;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Node {
                handle: _rt::Resource<Node>,
            }

            impl Node {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Node {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[resource-drop]node"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[constructor]node"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Node::from_handle(ret as u32)
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns another reference to the same resource.
                pub fn ref_(&self) -> Node {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.ref"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Node::from_handle(ret as u32)
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn children(&self) -> _rt::Vec<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.children"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                Node::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_child(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.add-child"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_child(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.remove-child"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn parent(&self) -> Option<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.parent"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    Node::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn transform(&self) -> Transform {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.transform"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        let l4 = *ptr0.add(12).cast::<f32>();
                        let l5 = *ptr0.add(16).cast::<f32>();
                        let l6 = *ptr0.add(20).cast::<f32>();
                        let l7 = *ptr0.add(24).cast::<f32>();
                        let l8 = *ptr0.add(28).cast::<f32>();
                        let l9 = *ptr0.add(32).cast::<f32>();
                        let l10 = *ptr0.add(36).cast::<f32>();
                        super::super::super::wired::math::types::Transform {
                            rotation: super::super::super::wired::math::types::Quat {
                                x: l1,
                                y: l2,
                                z: l3,
                                w: l4,
                            },
                            scale: super::super::super::wired::math::types::Vec3 {
                                x: l5,
                                y: l6,
                                z: l7,
                            },
                            translation: super::super::super::wired::math::types::Vec3 {
                                x: l8,
                                y: l9,
                                z: l10,
                            },
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_transform(&self, value: Transform) {
                    unsafe {
                        let super::super::super::wired::math::types::Transform {
                            rotation: rotation0,
                            scale: scale0,
                            translation: translation0,
                        } = value;
                        let super::super::super::wired::math::types::Quat {
                            x: x1,
                            y: y1,
                            z: z1,
                            w: w1,
                        } = rotation0;
                        let super::super::super::wired::math::types::Vec3 {
                            x: x2,
                            y: y2,
                            z: z2,
                        } = scale0;
                        let super::super::super::wired::math::types::Vec3 {
                            x: x3,
                            y: y3,
                            z: z3,
                        } = translation0;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-transform"]
                            fn wit_import(
                                _: i32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(x1),
                            _rt::as_f32(y1),
                            _rt::as_f32(z1),
                            _rt::as_f32(w1),
                            _rt::as_f32(x2),
                            _rt::as_f32(y2),
                            _rt::as_f32(z2),
                            _rt::as_f32(x3),
                            _rt::as_f32(y3),
                            _rt::as_f32(z3),
                        );
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn mesh(&self) -> Option<Mesh> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.mesh"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::scene::mesh::Mesh::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_mesh(&self, value: Option<&Mesh>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-mesh"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn collider(&self) -> Option<Collider> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.collider"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::physics::types::Collider::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_collider(&self, value: Option<&Collider>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-collider"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn rigid_body(&self) -> Option<RigidBody> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.rigid-body"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::physics::types::RigidBody::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_rigid_body(&self, value: Option<&RigidBody>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-rigid-body"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn input_handler(&self) -> Option<InputHandler> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.input-handler"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::input::handler::InputHandler::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Node {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_input_handler(&self, value: Option<&InputHandler>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/node")]
                        extern "C" {
                            #[link_name = "[method]node.set-input-handler"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod scene {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Node = super::super::super::wired::scene::node::Node;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Scene {
                handle: _rt::Resource<Scene>,
            }

            impl Scene {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Scene {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[resource-drop]scene"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Scene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[constructor]scene"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Scene::from_handle(ret as u32)
                    }
                }
            }
            impl Scene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[method]scene.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl Scene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[method]scene.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl Scene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[method]scene.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl Scene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn nodes(&self) -> _rt::Vec<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[method]scene.nodes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                super::super::super::wired::scene::node::Node::from_handle(
                                    l3 as u32,
                                )
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Scene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_node(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[method]scene.add-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Scene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_node(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/scene")]
                        extern "C" {
                            #[link_name = "[method]scene.remove-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod gltf {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Material = super::super::super::wired::scene::material::Material;
            pub type Mesh = super::super::super::wired::scene::mesh::Mesh;
            pub type Node = super::super::super::wired::scene::node::Node;
            pub type Scene = super::super::super::wired::scene::scene::Scene;
            /// A glTF document.
            /// Can be saved or loaded independently of the rest of the world.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Gltf {
                handle: _rt::Resource<Gltf>,
            }

            impl Gltf {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Gltf {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[resource-drop]gltf"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[constructor]gltf"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Gltf::from_handle(ret as u32)
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_materials(&self) -> _rt::Vec<Material> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.list-materials"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                super::super::super::wired::scene::material::Material::from_handle(
                                    l3 as u32,
                                )
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_material(&self, value: &Material) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.add-material"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_material(&self, value: &Material) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.remove-material"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_meshes(&self) -> _rt::Vec<Mesh> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.list-meshes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                super::super::super::wired::scene::mesh::Mesh::from_handle(
                                    l3 as u32,
                                )
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_mesh(&self, value: &Mesh) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.add-mesh"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_mesh(&self, value: &Mesh) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.remove-mesh"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_nodes(&self) -> _rt::Vec<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.list-nodes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                super::super::super::wired::scene::node::Node::from_handle(
                                    l3 as u32,
                                )
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_node(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.add-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_node(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.remove-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_scenes(&self) -> _rt::Vec<Scene> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.list-scenes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                super::super::super::wired::scene::scene::Scene::from_handle(
                                    l3 as u32,
                                )
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_scene(&self, value: &Scene) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.add-scene"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_scene(&self, value: &Scene) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.remove-scene"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                /// The currently loaded scene.
                pub fn active_scene(&self) -> Option<Scene> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.active-scene"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::scene::scene::Scene::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_active_scene(&self, value: Option<&Scene>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.set-active-scene"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                /// The default active scene, used when an asset is first loaded.
                /// If not explicitly set, the first scene will be used.
                pub fn default_scene(&self) -> Option<Scene> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.default-scene"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    super::super::super::wired::scene::scene::Scene::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Gltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_default_scene(&self, value: &Scene) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/gltf")]
                        extern "C" {
                            #[link_name = "[method]gltf.set-default-scene"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod glxf {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Gltf = super::super::super::wired::scene::gltf::Gltf;
            pub type Node = super::super::super::wired::scene::node::Node;
            pub type Transform = super::super::super::wired::math::types::Transform;
            /// A glXF document.
            /// Used to compose multiple independent glTF assets together.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Glxf {
                handle: _rt::Resource<Glxf>,
            }

            impl Glxf {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Glxf {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[resource-drop]glxf"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct AssetGltf {
                handle: _rt::Resource<AssetGltf>,
            }

            impl AssetGltf {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for AssetGltf {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[resource-drop]asset-gltf"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct AssetGlxf {
                handle: _rt::Resource<AssetGlxf>,
            }

            impl AssetGlxf {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for AssetGlxf {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[resource-drop]asset-glxf"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            pub enum Asset {
                Gltf(AssetGltf),
                Glxf(AssetGlxf),
            }
            impl ::core::fmt::Debug for Asset {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Asset::Gltf(e) => f.debug_tuple("Asset::Gltf").field(e).finish(),
                        Asset::Glxf(e) => f.debug_tuple("Asset::Glxf").field(e).finish(),
                    }
                }
            }
            pub enum AssetBorrow<'a> {
                Gltf(&'a AssetGltf),
                Glxf(&'a AssetGlxf),
            }
            impl<'a> ::core::fmt::Debug for AssetBorrow<'a> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        AssetBorrow::Gltf(e) => {
                            f.debug_tuple("AssetBorrow::Gltf").field(e).finish()
                        }
                        AssetBorrow::Glxf(e) => {
                            f.debug_tuple("AssetBorrow::Glxf").field(e).finish()
                        }
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GlxfNode {
                handle: _rt::Resource<GlxfNode>,
            }

            impl GlxfNode {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for GlxfNode {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[resource-drop]glxf-node"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            pub enum Children {
                Asset(Asset),
                Nodes(_rt::Vec<GlxfNode>),
            }
            impl ::core::fmt::Debug for Children {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Children::Asset(e) => f.debug_tuple("Children::Asset").field(e).finish(),
                        Children::Nodes(e) => f.debug_tuple("Children::Nodes").field(e).finish(),
                    }
                }
            }
            pub enum ChildrenBorrow<'a> {
                Asset(AssetBorrow<'a>),
                Nodes(_rt::Vec<&'a GlxfNode>),
            }
            impl<'a> ::core::fmt::Debug for ChildrenBorrow<'a> {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ChildrenBorrow::Asset(e) => {
                            f.debug_tuple("ChildrenBorrow::Asset").field(e).finish()
                        }
                        ChildrenBorrow::Nodes(e) => {
                            f.debug_tuple("ChildrenBorrow::Nodes").field(e).finish()
                        }
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GlxfScene {
                handle: _rt::Resource<GlxfScene>,
            }

            impl GlxfScene {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for GlxfScene {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[resource-drop]glxf-scene"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            /// Returns the root glXF that the script is attached to.
            pub fn get_root() -> Glxf {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wired:scene/glxf")]
                    extern "C" {
                        #[link_name = "get-root"]
                        fn wit_import() -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    Glxf::from_handle(ret as u32)
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[constructor]glxf"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Glxf::from_handle(ret as u32)
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_assets(&self) -> _rt::Vec<Asset> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.list-assets"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base7 = l1;
                        let len7 = l2;
                        let mut result7 = _rt::Vec::with_capacity(len7);
                        for i in 0..len7 {
                            let base = base7.add(i * 8);
                            let e7 = {
                                let l3 = i32::from(*base.add(0).cast::<u8>());
                                let v6 = match l3 {
                                    0 => {
                                        let e6 = {
                                            let l4 = *base.add(4).cast::<i32>();

                                            AssetGltf::from_handle(l4 as u32)
                                        };
                                        Asset::Gltf(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e6 = {
                                            let l5 = *base.add(4).cast::<i32>();

                                            AssetGlxf::from_handle(l5 as u32)
                                        };
                                        Asset::Glxf(e6)
                                    }
                                };

                                v6
                            };
                            result7.push(e7);
                        }
                        _rt::cabi_dealloc(base7, len7 * 8, 4);
                        result7
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_asset(&self, value: &AssetBorrow<'_>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            AssetBorrow::Gltf(e) => (0i32, (e).handle() as i32),
                            AssetBorrow::Glxf(e) => (1i32, (e).handle() as i32),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.add-asset"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_asset(&self, value: &AssetBorrow<'_>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            AssetBorrow::Gltf(e) => (0i32, (e).handle() as i32),
                            AssetBorrow::Glxf(e) => (1i32, (e).handle() as i32),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.remove-asset"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_nodes(&self) -> _rt::Vec<GlxfNode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.list-nodes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                GlxfNode::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_node(&self, value: &GlxfNode) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.add-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_node(&self, value: &GlxfNode) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.remove-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_scenes(&self) -> _rt::Vec<GlxfScene> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.list-scenes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                GlxfScene::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_scene(&self, value: &GlxfScene) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.add-scene"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_scene(&self, value: &GlxfScene) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.remove-scene"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                /// The currently loaded scene.
                pub fn active_scene(&self) -> Option<GlxfScene> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.active-scene"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    GlxfScene::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_active_scene(&self, value: Option<&GlxfScene>) {
                    unsafe {
                        let (result0_0, result0_1) = match value {
                            Some(e) => (1i32, (e).handle() as i32),
                            None => (0i32, 0i32),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.set-active-scene"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0_0, result0_1);
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                /// The default active scene, used when an asset is first loaded.
                /// If not explicitly set, the first scene will be used.
                pub fn default_scene(&self) -> Option<GlxfScene> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.default-scene"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    GlxfScene::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Glxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_default_scene(&self, value: &GlxfScene) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf.set-default-scene"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl AssetGltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(document: &Gltf) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[constructor]asset-gltf"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((document).handle() as i32);
                        AssetGltf::from_handle(ret as u32)
                    }
                }
            }
            impl AssetGltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn document(&self) -> Gltf {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-gltf.document"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wired::scene::gltf::Gltf::from_handle(ret as u32)
                    }
                }
            }
            impl AssetGltf {
                #[allow(unused_unsafe, clippy::all)]
                /// Asset nodes to use.
                /// If empty, will use the default scene.
                pub fn list_nodes(&self) -> _rt::Vec<Node> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-gltf.list-nodes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                super::super::super::wired::scene::node::Node::from_handle(
                                    l3 as u32,
                                )
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl AssetGltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_node(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-gltf.add-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl AssetGltf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_node(&self, value: &Node) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-gltf.remove-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl AssetGlxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(document: &Glxf) -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[constructor]asset-glxf"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((document).handle() as i32);
                        AssetGlxf::from_handle(ret as u32)
                    }
                }
            }
            impl AssetGlxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn document(&self) -> Glxf {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-glxf.document"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        Glxf::from_handle(ret as u32)
                    }
                }
            }
            impl AssetGlxf {
                #[allow(unused_unsafe, clippy::all)]
                /// Asset nodes to use.
                /// If empty, will use the default scene.
                pub fn list_nodes(&self) -> _rt::Vec<GlxfNode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-glxf.list-nodes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                GlxfNode::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl AssetGlxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_node(&self, value: &GlxfNode) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-glxf.add-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl AssetGlxf {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_node(&self, value: &GlxfNode) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]asset-glxf.remove-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (value).handle() as i32);
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[constructor]glxf-node"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        GlxfNode::from_handle(ret as u32)
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn transform(&self) -> Transform {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 40]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.transform"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<f32>();
                        let l2 = *ptr0.add(4).cast::<f32>();
                        let l3 = *ptr0.add(8).cast::<f32>();
                        let l4 = *ptr0.add(12).cast::<f32>();
                        let l5 = *ptr0.add(16).cast::<f32>();
                        let l6 = *ptr0.add(20).cast::<f32>();
                        let l7 = *ptr0.add(24).cast::<f32>();
                        let l8 = *ptr0.add(28).cast::<f32>();
                        let l9 = *ptr0.add(32).cast::<f32>();
                        let l10 = *ptr0.add(36).cast::<f32>();
                        super::super::super::wired::math::types::Transform {
                            rotation: super::super::super::wired::math::types::Quat {
                                x: l1,
                                y: l2,
                                z: l3,
                                w: l4,
                            },
                            scale: super::super::super::wired::math::types::Vec3 {
                                x: l5,
                                y: l6,
                                z: l7,
                            },
                            translation: super::super::super::wired::math::types::Vec3 {
                                x: l8,
                                y: l9,
                                z: l10,
                            },
                        }
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_transform(&self, value: Transform) {
                    unsafe {
                        let super::super::super::wired::math::types::Transform {
                            rotation: rotation0,
                            scale: scale0,
                            translation: translation0,
                        } = value;
                        let super::super::super::wired::math::types::Quat {
                            x: x1,
                            y: y1,
                            z: z1,
                            w: w1,
                        } = rotation0;
                        let super::super::super::wired::math::types::Vec3 {
                            x: x2,
                            y: y2,
                            z: z2,
                        } = scale0;
                        let super::super::super::wired::math::types::Vec3 {
                            x: x3,
                            y: y3,
                            z: z3,
                        } = translation0;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.set-transform"]
                            fn wit_import(
                                _: i32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                                _: f32,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_f32(x1),
                            _rt::as_f32(y1),
                            _rt::as_f32(z1),
                            _rt::as_f32(w1),
                            _rt::as_f32(x2),
                            _rt::as_f32(y2),
                            _rt::as_f32(z2),
                            _rt::as_f32(x3),
                            _rt::as_f32(y3),
                            _rt::as_f32(z3),
                        );
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn parent(&self) -> Option<GlxfNode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.parent"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();

                                    GlxfNode::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn children(&self) -> Option<Children> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.children"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v11 = match l2 {
                                        0 => {
                                            let e11 = {
                                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v6 = match l3 {
                                                    0 => {
                                                        let e6 = {
                                                            let l4 = *ptr0.add(12).cast::<i32>();

                                                            AssetGltf::from_handle(l4 as u32)
                                                        };
                                                        Asset::Gltf(e6)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 1,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e6 = {
                                                            let l5 = *ptr0.add(12).cast::<i32>();

                                                            AssetGlxf::from_handle(l5 as u32)
                                                        };
                                                        Asset::Glxf(e6)
                                                    }
                                                };

                                                v6
                                            };
                                            Children::Asset(e11)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e11 = {
                                                let l7 = *ptr0.add(8).cast::<*mut u8>();
                                                let l8 = *ptr0.add(12).cast::<usize>();
                                                let base10 = l7;
                                                let len10 = l8;
                                                let mut result10 = _rt::Vec::with_capacity(len10);
                                                for i in 0..len10 {
                                                    let base = base10.add(i * 4);
                                                    let e10 = {
                                                        let l9 = *base.add(0).cast::<i32>();

                                                        GlxfNode::from_handle(l9 as u32)
                                                    };
                                                    result10.push(e10);
                                                }
                                                _rt::cabi_dealloc(base10, len10 * 4, 4);

                                                result10
                                            };
                                            Children::Nodes(e11)
                                        }
                                    };

                                    v11
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl GlxfNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_children(&self, value: Option<&ChildrenBorrow<'_>>) {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let (result3_0, result3_1, result3_2, result3_3) = match value {
                            Some(e) => {
                                let (result2_0, result2_1, result2_2) = match e {
                                    ChildrenBorrow::Asset(e) => {
                                        let (result0_0, result0_1) = match e {
                                            AssetBorrow::Gltf(e) => (0i32, (e).handle() as i32),
                                            AssetBorrow::Glxf(e) => (1i32, (e).handle() as i32),
                                        };

                                        (0i32, result0_0 as *mut u8, result0_1 as usize)
                                    }
                                    ChildrenBorrow::Nodes(e) => {
                                        let vec1 = e;
                                        let len1 = vec1.len();
                                        let layout1 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec1.len() * 4,
                                            4,
                                        );
                                        let result1 = if layout1.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout1);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec1.into_iter().enumerate() {
                                            let base = result1.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).handle() as i32;
                                            }
                                        }
                                        cleanup_list.extend_from_slice(&[(result1, layout1)]);

                                        (1i32, result1, len1)
                                    }
                                };

                                (1i32, result2_0, result2_1, result2_2)
                            }
                            None => (0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-node.set-children"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            result3_3,
                        );
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl GlxfScene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[constructor]glxf-scene"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        GlxfScene::from_handle(ret as u32)
                    }
                }
            }
            impl GlxfScene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn id(&self) -> u32 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-scene.id"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u32
                    }
                }
            }
            impl GlxfScene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn name(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-scene.name"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl GlxfScene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_name(&self, value: &str) {
                    unsafe {
                        let vec0 = value;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-scene.set-name"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                    }
                }
            }
            impl GlxfScene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn nodes(&self) -> _rt::Vec<GlxfNode> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-scene.nodes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                GlxfNode::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl GlxfScene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_node(&self, node: &GlxfNode) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-scene.add-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (node).handle() as i32);
                    }
                }
            }
            impl GlxfScene {
                #[allow(unused_unsafe, clippy::all)]
                pub fn remove_node(&self, node: &GlxfNode) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wired:scene/glxf")]
                        extern "C" {
                            #[link_name = "[method]glxf-scene.remove-node"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (node).handle() as i32);
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod wired {
        #[allow(dead_code)]
        pub mod script {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Script {
                    handle: _rt::Resource<Script>,
                }

                type _ScriptRep<T> = Option<T>;

                impl Script {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Script`.
                    pub fn new<T: GuestScript>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ScriptRep<T> = Some(val);
                        let ptr: *mut _ScriptRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestScript>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestScript>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestScript>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestScript` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ScriptRep<T>);
                    }

                    fn as_ptr<T: GuestScript>(&self) -> *mut _ScriptRep<T> {
                        Script::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Script`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ScriptBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Script>,
                }

                impl<'a> ScriptBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestScript>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ScriptRep<T> {
                        Script::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Script {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-drop]script"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_script_cabi<T: GuestScript>() -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = Script::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_script_update_cabi<T: GuestScript>(
                    arg0: *mut u8,
                    arg1: f32,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::update(ScriptBorrow::lift(arg0 as u32 as usize).get(), arg1);
                }
                pub trait Guest {
                    type Script: GuestScript;
                }
                pub trait GuestScript: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-new]script"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]wired:script/types")]
                            extern "C" {
                                #[link_name = "[resource-rep]script"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new() -> Self;
                    /// Called every tick.
                    fn update(&self, delta: f32);
                }
                #[doc(hidden)]

                macro_rules! __export_wired_script_types_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "wired:script/types#[constructor]script"]
        unsafe extern "C" fn export_constructor_script() -> i32 {
          $($path_to_types)*::_export_constructor_script_cabi::<<$ty as $($path_to_types)*::Guest>::Script>()
        }
        #[export_name = "wired:script/types#[method]script.update"]
        unsafe extern "C" fn export_method_script_update(arg0: *mut u8,arg1: f32,) {
          $($path_to_types)*::_export_method_script_update_cabi::<<$ty as $($path_to_types)*::Guest>::Script>(arg0, arg1)
        }

        const _: () = {
          #[doc(hidden)]
          #[export_name = "wired:script/types#[dtor]script"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: *mut u8) {
            $($path_to_types)*::Script::dtor::<
            <$ty as $($path_to_types)*::Guest>::Script
            >(rep)
          }
        };

      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_wired_script_types_cabi;
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_script_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wired::script::types::__export_wired_script_types_cabi!($ty with_types_in $($path_to_types_root)*::exports::wired::script::types);
  )
}
#[doc(inline)]
pub(crate) use __export_script_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:script:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 7656] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xeb:\x01A\x02\x01A(\x01\
B\x13\x01r\x04\x01rv\x01gv\x01bv\x01av\x04\0\x05color\x03\0\0\x04\0\x08material\x03\
\x01\x01i\x02\x01@\0\0\x03\x04\0\x15[constructor]material\x01\x04\x01h\x02\x01@\x01\
\x04self\x05\0y\x04\0\x13[method]material.id\x01\x06\x01@\x01\x04self\x05\0\x03\x04\
\0\x14[method]material.ref\x01\x07\x01@\x01\x04self\x05\0s\x04\0\x15[method]mate\
rial.name\x01\x08\x01@\x02\x04self\x05\x05values\x01\0\x04\0\x19[method]material\
.set-name\x01\x09\x01@\x01\x04self\x05\0\x01\x04\0\x16[method]material.color\x01\
\x0a\x01@\x02\x04self\x05\x05value\x01\x01\0\x04\0\x1a[method]material.set-color\
\x01\x0b\x03\x01\x14wired:scene/material\x05\0\x02\x03\0\0\x08material\x01B+\x02\
\x03\x02\x01\x01\x04\0\x08material\x03\0\0\x04\0\x09primitive\x03\x01\x04\0\x04m\
esh\x03\x01\x01h\x02\x01@\x01\x04self\x04\0y\x04\0\x14[method]primitive.id\x01\x05\
\x01i\x01\x01k\x06\x01@\x01\x04self\x04\0\x07\x04\0\x1a[method]primitive.materia\
l\x01\x08\x01h\x01\x01k\x09\x01@\x02\x04self\x04\x05value\x0a\x01\0\x04\0\x1e[me\
thod]primitive.set-material\x01\x0b\x01py\x01@\x02\x04self\x04\x05value\x0c\x01\0\
\x04\0\x1d[method]primitive.set-indices\x01\x0d\x01pv\x01@\x02\x04self\x04\x05va\
lue\x0e\x01\0\x04\0\x1d[method]primitive.set-normals\x01\x0f\x04\0\x1f[method]pr\
imitive.set-positions\x01\x0f\x04\0\x19[method]primitive.set-uvs\x01\x0f\x01i\x03\
\x01@\0\0\x10\x04\0\x11[constructor]mesh\x01\x11\x01h\x03\x01@\x01\x04self\x12\0\
y\x04\0\x0f[method]mesh.id\x01\x13\x01@\x01\x04self\x12\0\x10\x04\0\x10[method]m\
esh.ref\x01\x14\x01@\x01\x04self\x12\0s\x04\0\x11[method]mesh.name\x01\x15\x01@\x02\
\x04self\x12\x05values\x01\0\x04\0\x15[method]mesh.set-name\x01\x16\x01i\x02\x01\
p\x17\x01@\x01\x04self\x12\0\x18\x04\0\x1c[method]mesh.list-primitives\x01\x19\x01\
@\x01\x04self\x12\0\x17\x04\0\x1d[method]mesh.create-primitive\x01\x1a\x01@\x02\x04\
self\x12\x05value\x17\x01\0\x04\0\x1d[method]mesh.remove-primitive\x01\x1b\x03\x01\
\x10wired:scene/mesh\x05\x02\x01B\x0a\x01r\x02\x01xv\x01yv\x04\0\x04vec2\x03\0\0\
\x01r\x03\x01xv\x01yv\x01zv\x04\0\x04vec3\x03\0\x02\x01r\x04\x01xv\x01yv\x01zv\x01\
wv\x04\0\x04quat\x03\0\x04\x01r\x03\x08rotation\x05\x05scale\x03\x0btranslation\x03\
\x04\0\x09transform\x03\0\x06\x01@\0\0\x01\x04\0\x07fake-fn\x01\x08\x03\x01\x10w\
ired:math/types\x05\x03\x02\x03\0\x02\x04vec3\x02\x03\0\x02\x04quat\x01B\x15\x02\
\x03\x02\x01\x04\x04\0\x04vec3\x03\0\0\x02\x03\x02\x01\x05\x04\0\x04quat\x03\0\x02\
\x01m\x02\x04left\x05right\x04\0\x09hand-side\x03\0\x04\x01r\x03\x0btranslation\x01\
\x08rotation\x03\x06radiusv\x04\0\x05joint\x03\0\x06\x01r\x04\x03tip\x07\x06dist\
al\x07\x08proximal\x07\x0ametacarpal\x07\x04\0\x06finger\x03\0\x08\x01k\x07\x01r\
\x09\x04side\x05\x05thumb\x09\x05index\x09\x06middle\x09\x04ring\x09\x06little\x09\
\x04palm\x07\x05wrist\x07\x05elbow\x0a\x04\0\x04hand\x03\0\x0b\x01r\x02\x06origi\
n\x01\x0borientation\x03\x04\0\x03ray\x03\0\x0d\x01r\x03\x06origin\x01\x0borient\
ation\x03\x06radiusv\x04\0\x03tip\x03\0\x0f\x01q\x03\x04hand\x01\x0c\0\x03ray\x01\
\x0e\0\x03tip\x01\x10\0\x04\0\x0ainput-type\x03\0\x11\x01r\x04\x02idw\x05input\x12\
\x08distancev\x05ordery\x04\0\x0binput-event\x03\0\x13\x03\x01\x11wired:input/ty\
pes\x05\x06\x02\x03\0\x03\x0binput-event\x01B\x0a\x02\x03\x02\x01\x07\x04\0\x0bi\
nput-event\x03\0\0\x04\0\x0dinput-handler\x03\x01\x01i\x02\x01@\0\0\x03\x04\0\x1a\
[constructor]input-handler\x01\x04\x01h\x02\x01k\x01\x01@\x01\x04self\x05\0\x06\x04\
\0\"[method]input-handler.handle-input\x01\x07\x03\x01\x13wired:input/handler\x05\
\x08\x01B\x1c\x02\x03\x02\x01\x04\x04\0\x04vec3\x03\0\0\x04\0\x08collider\x03\x01\
\x01r\x02\x06heightv\x06radiusv\x04\0\x0eshape-cylinder\x03\0\x03\x01q\x03\x06cu\
boid\x01\x01\0\x08cylinder\x01\x04\0\x06sphere\x01v\0\x04\0\x05shape\x03\0\x05\x04\
\0\x0arigid-body\x03\x01\x01m\x03\x07dynamic\x05fixed\x09kinematic\x04\0\x0frigi\
d-body-type\x03\0\x08\x01i\x02\x01@\x01\x05shape\x06\0\x0a\x04\0\x15[constructor\
]collider\x01\x0b\x01h\x02\x01@\x01\x04self\x0c\0v\x04\0\x18[method]collider.den\
sity\x01\x0d\x01@\x02\x04self\x0c\x05valuev\x01\0\x04\0\x1c[method]collider.set-\
density\x01\x0e\x01i\x07\x01@\x01\x0frigid-body-type\x09\0\x0f\x04\0\x17[constru\
ctor]rigid-body\x01\x10\x01h\x07\x01@\x01\x04self\x11\0\x01\x04\0\x19[method]rig\
id-body.angvel\x01\x12\x01@\x02\x04self\x11\x05value\x01\x01\0\x04\0\x1d[method]\
rigid-body.set-angvel\x01\x13\x04\0\x19[method]rigid-body.linvel\x01\x12\x04\0\x1d\
[method]rigid-body.set-linvel\x01\x13\x03\x01\x13wired:physics/types\x05\x09\x02\
\x03\0\x01\x04mesh\x02\x03\0\x04\x0dinput-handler\x02\x03\0\x02\x09transform\x02\
\x03\0\x05\x08collider\x02\x03\0\x05\x0arigid-body\x01BD\x02\x03\x02\x01\x0a\x04\
\0\x04mesh\x03\0\0\x02\x03\x02\x01\x0b\x04\0\x0dinput-handler\x03\0\x02\x02\x03\x02\
\x01\x0c\x04\0\x09transform\x03\0\x04\x02\x03\x02\x01\x0d\x04\0\x08collider\x03\0\
\x06\x02\x03\x02\x01\x0e\x04\0\x0arigid-body\x03\0\x08\x04\0\x04node\x03\x01\x01\
i\x0a\x01@\0\0\x0b\x04\0\x11[constructor]node\x01\x0c\x01h\x0a\x01@\x01\x04self\x0d\
\0y\x04\0\x0f[method]node.id\x01\x0e\x01@\x01\x04self\x0d\0\x0b\x04\0\x10[method\
]node.ref\x01\x0f\x01@\x01\x04self\x0d\0s\x04\0\x11[method]node.name\x01\x10\x01\
@\x02\x04self\x0d\x05values\x01\0\x04\0\x15[method]node.set-name\x01\x11\x01p\x0b\
\x01@\x01\x04self\x0d\0\x12\x04\0\x15[method]node.children\x01\x13\x01@\x02\x04s\
elf\x0d\x05value\x0d\x01\0\x04\0\x16[method]node.add-child\x01\x14\x04\0\x19[met\
hod]node.remove-child\x01\x14\x01k\x0b\x01@\x01\x04self\x0d\0\x15\x04\0\x13[meth\
od]node.parent\x01\x16\x01@\x01\x04self\x0d\0\x05\x04\0\x16[method]node.transfor\
m\x01\x17\x01@\x02\x04self\x0d\x05value\x05\x01\0\x04\0\x1a[method]node.set-tran\
sform\x01\x18\x01i\x01\x01k\x19\x01@\x01\x04self\x0d\0\x1a\x04\0\x11[method]node\
.mesh\x01\x1b\x01h\x01\x01k\x1c\x01@\x02\x04self\x0d\x05value\x1d\x01\0\x04\0\x15\
[method]node.set-mesh\x01\x1e\x01i\x07\x01k\x1f\x01@\x01\x04self\x0d\0\x20\x04\0\
\x15[method]node.collider\x01!\x01h\x07\x01k\"\x01@\x02\x04self\x0d\x05value#\x01\
\0\x04\0\x19[method]node.set-collider\x01$\x01i\x09\x01k%\x01@\x01\x04self\x0d\0\
&\x04\0\x17[method]node.rigid-body\x01'\x01h\x09\x01k(\x01@\x02\x04self\x0d\x05v\
alue)\x01\0\x04\0\x1b[method]node.set-rigid-body\x01*\x01i\x03\x01k+\x01@\x01\x04\
self\x0d\0,\x04\0\x1a[method]node.input-handler\x01-\x01h\x03\x01k.\x01@\x02\x04\
self\x0d\x05value/\x01\0\x04\0\x1e[method]node.set-input-handler\x010\x03\x01\x10\
wired:scene/node\x05\x0f\x02\x03\0\x06\x04node\x01B\x19\x02\x03\x02\x01\x10\x04\0\
\x04node\x03\0\0\x04\0\x06screen\x03\x01\x04\0\x06module\x03\x01\x01i\x02\x01@\0\
\0\x04\x04\0\x13[constructor]screen\x01\x05\x01h\x02\x01i\x03\x01@\x02\x04self\x06\
\x06module\x07\x01\0\x04\0\x19[method]screen.add-module\x01\x08\x01@\x01\x04self\
\x06\0\x7f\x04\0\x16[method]screen.visible\x01\x09\x01@\x02\x04self\x06\x05value\
\x7f\x01\0\x04\0\x1a[method]screen.set-visible\x01\x0a\x01@\x02\x04self\x06\x05d\
eltav\x01\0\x04\0\x15[method]screen.update\x01\x0b\x01@\0\0\x07\x04\0\x13[constr\
uctor]module\x01\x0c\x01h\x03\x01i\x01\x01@\x01\x04self\x0d\0\x0e\x04\0\x13[meth\
od]module.root\x01\x0f\x01@\x02\x04self\x0d\x05deltav\x01\0\x04\0\x15[method]mod\
ule.update\x01\x10\x03\x01\x14unavi:vscreen/screen\x05\x11\x01B\x04\x01m\x04\x05\
debug\x04info\x04warn\x05error\x04\0\x09log-level\x03\0\0\x01@\x02\x05level\x01\x07\
messages\x01\0\x04\0\x03log\x01\x02\x03\x01\x0dwired:log/api\x05\x12\x01B\x0f\x02\
\x03\x02\x01\x10\x04\0\x04node\x03\0\0\x01i\x01\x01r\x0f\x04head\x02\x05spine\x02\
\x04hips\x02\x0eleft-upper-arm\x02\x0eleft-lower-arm\x02\x09left-hand\x02\x0frig\
ht-upper-arm\x02\x0fright-lower-arm\x02\x0aright-hand\x02\x0eleft-upper-leg\x02\x0e\
left-lower-leg\x02\x09left-foot\x02\x0fright-upper-leg\x02\x0fright-lower-leg\x02\
\x0aright-foot\x02\x04\0\x08skeleton\x03\0\x03\x04\0\x06player\x03\x01\x01h\x05\x01\
@\x01\x04self\x06\0\x04\x04\0\x17[method]player.skeleton\x01\x07\x01i\x05\x01p\x08\
\x01@\0\0\x09\x04\0\x0clist-players\x01\x0a\x01@\0\0\x08\x04\0\x0clocal-player\x01\
\x0b\x03\x01\x10wired:player/api\x05\x13\x01B\x15\x02\x03\x02\x01\x10\x04\0\x04n\
ode\x03\0\0\x04\0\x05scene\x03\x01\x01i\x02\x01@\0\0\x03\x04\0\x12[constructor]s\
cene\x01\x04\x01h\x02\x01@\x01\x04self\x05\0y\x04\0\x10[method]scene.id\x01\x06\x01\
@\x01\x04self\x05\0s\x04\0\x12[method]scene.name\x01\x07\x01@\x02\x04self\x05\x05\
values\x01\0\x04\0\x16[method]scene.set-name\x01\x08\x01i\x01\x01p\x09\x01@\x01\x04\
self\x05\0\x0a\x04\0\x13[method]scene.nodes\x01\x0b\x01h\x01\x01@\x02\x04self\x05\
\x05value\x0c\x01\0\x04\0\x16[method]scene.add-node\x01\x0d\x04\0\x19[method]sce\
ne.remove-node\x01\x0d\x03\x01\x11wired:scene/scene\x05\x14\x02\x03\0\x0a\x05sce\
ne\x01B5\x02\x03\x02\x01\x01\x04\0\x08material\x03\0\0\x02\x03\x02\x01\x0a\x04\0\
\x04mesh\x03\0\x02\x02\x03\x02\x01\x10\x04\0\x04node\x03\0\x04\x02\x03\x02\x01\x15\
\x04\0\x05scene\x03\0\x06\x04\0\x04gltf\x03\x01\x01i\x08\x01@\0\0\x09\x04\0\x11[\
constructor]gltf\x01\x0a\x01h\x08\x01i\x01\x01p\x0c\x01@\x01\x04self\x0b\0\x0d\x04\
\0\x1b[method]gltf.list-materials\x01\x0e\x01h\x01\x01@\x02\x04self\x0b\x05value\
\x0f\x01\0\x04\0\x19[method]gltf.add-material\x01\x10\x04\0\x1c[method]gltf.remo\
ve-material\x01\x10\x01i\x03\x01p\x11\x01@\x01\x04self\x0b\0\x12\x04\0\x18[metho\
d]gltf.list-meshes\x01\x13\x01h\x03\x01@\x02\x04self\x0b\x05value\x14\x01\0\x04\0\
\x15[method]gltf.add-mesh\x01\x15\x04\0\x18[method]gltf.remove-mesh\x01\x15\x01i\
\x05\x01p\x16\x01@\x01\x04self\x0b\0\x17\x04\0\x17[method]gltf.list-nodes\x01\x18\
\x01h\x05\x01@\x02\x04self\x0b\x05value\x19\x01\0\x04\0\x15[method]gltf.add-node\
\x01\x1a\x04\0\x18[method]gltf.remove-node\x01\x1a\x01i\x07\x01p\x1b\x01@\x01\x04\
self\x0b\0\x1c\x04\0\x18[method]gltf.list-scenes\x01\x1d\x01h\x07\x01@\x02\x04se\
lf\x0b\x05value\x1e\x01\0\x04\0\x16[method]gltf.add-scene\x01\x1f\x04\0\x19[meth\
od]gltf.remove-scene\x01\x1f\x01k\x1b\x01@\x01\x04self\x0b\0\x20\x04\0\x19[metho\
d]gltf.active-scene\x01!\x01k\x1e\x01@\x02\x04self\x0b\x05value\"\x01\0\x04\0\x1d\
[method]gltf.set-active-scene\x01#\x04\0\x1a[method]gltf.default-scene\x01!\x04\0\
\x1e[method]gltf.set-default-scene\x01\x1f\x03\x01\x10wired:scene/gltf\x05\x16\x02\
\x03\0\x0b\x04gltf\x01Bt\x02\x03\x02\x01\x17\x04\0\x04gltf\x03\0\0\x02\x03\x02\x01\
\x10\x04\0\x04node\x03\0\x02\x02\x03\x02\x01\x0c\x04\0\x09transform\x03\0\x04\x04\
\0\x04glxf\x03\x01\x04\0\x0aasset-gltf\x03\x01\x04\0\x0aasset-glxf\x03\x01\x01i\x07\
\x01i\x08\x01q\x02\x04gltf\x01\x09\0\x04glxf\x01\x0a\0\x04\0\x05asset\x03\0\x0b\x01\
h\x07\x01h\x08\x01q\x02\x04gltf\x01\x0d\0\x04glxf\x01\x0e\0\x04\0\x0casset-borro\
w\x03\0\x0f\x04\0\x09glxf-node\x03\x01\x01i\x11\x01p\x12\x01q\x02\x05asset\x01\x0c\
\0\x05nodes\x01\x13\0\x04\0\x08children\x03\0\x14\x01h\x11\x01p\x16\x01q\x02\x05\
asset\x01\x10\0\x05nodes\x01\x17\0\x04\0\x0fchildren-borrow\x03\0\x18\x04\0\x0ag\
lxf-scene\x03\x01\x01i\x06\x01@\0\0\x1b\x04\0\x11[constructor]glxf\x01\x1c\x01h\x06\
\x01p\x0c\x01@\x01\x04self\x1d\0\x1e\x04\0\x18[method]glxf.list-assets\x01\x1f\x01\
@\x02\x04self\x1d\x05value\x10\x01\0\x04\0\x16[method]glxf.add-asset\x01\x20\x04\
\0\x19[method]glxf.remove-asset\x01\x20\x01@\x01\x04self\x1d\0\x13\x04\0\x17[met\
hod]glxf.list-nodes\x01!\x01@\x02\x04self\x1d\x05value\x16\x01\0\x04\0\x15[metho\
d]glxf.add-node\x01\"\x04\0\x18[method]glxf.remove-node\x01\"\x01i\x1a\x01p#\x01\
@\x01\x04self\x1d\0$\x04\0\x18[method]glxf.list-scenes\x01%\x01h\x1a\x01@\x02\x04\
self\x1d\x05value&\x01\0\x04\0\x16[method]glxf.add-scene\x01'\x04\0\x19[method]g\
lxf.remove-scene\x01'\x01k#\x01@\x01\x04self\x1d\0(\x04\0\x19[method]glxf.active\
-scene\x01)\x01k&\x01@\x02\x04self\x1d\x05value*\x01\0\x04\0\x1d[method]glxf.set\
-active-scene\x01+\x04\0\x1a[method]glxf.default-scene\x01)\x04\0\x1e[method]glx\
f.set-default-scene\x01'\x01h\x01\x01@\x01\x08document,\0\x09\x04\0\x17[construc\
tor]asset-gltf\x01-\x01i\x01\x01@\x01\x04self\x0d\0.\x04\0\x1b[method]asset-gltf\
.document\x01/\x01i\x03\x01p0\x01@\x01\x04self\x0d\01\x04\0\x1d[method]asset-glt\
f.list-nodes\x012\x01h\x03\x01@\x02\x04self\x0d\x05value3\x01\0\x04\0\x1b[method\
]asset-gltf.add-node\x014\x04\0\x1e[method]asset-gltf.remove-node\x014\x01@\x01\x08\
document\x1d\0\x0a\x04\0\x17[constructor]asset-glxf\x015\x01@\x01\x04self\x0e\0\x1b\
\x04\0\x1b[method]asset-glxf.document\x016\x01@\x01\x04self\x0e\0\x13\x04\0\x1d[\
method]asset-glxf.list-nodes\x017\x01@\x02\x04self\x0e\x05value\x16\x01\0\x04\0\x1b\
[method]asset-glxf.add-node\x018\x04\0\x1e[method]asset-glxf.remove-node\x018\x01\
@\0\0\x12\x04\0\x16[constructor]glxf-node\x019\x01@\x01\x04self\x16\0y\x04\0\x14\
[method]glxf-node.id\x01:\x01@\x01\x04self\x16\0s\x04\0\x16[method]glxf-node.nam\
e\x01;\x01@\x02\x04self\x16\x05values\x01\0\x04\0\x1a[method]glxf-node.set-name\x01\
<\x01@\x01\x04self\x16\0\x05\x04\0\x1b[method]glxf-node.transform\x01=\x01@\x02\x04\
self\x16\x05value\x05\x01\0\x04\0\x1f[method]glxf-node.set-transform\x01>\x01k\x12\
\x01@\x01\x04self\x16\0?\x04\0\x18[method]glxf-node.parent\x01@\x01k\x15\x01@\x01\
\x04self\x16\0\xc1\0\x04\0\x1a[method]glxf-node.children\x01B\x01k\x19\x01@\x02\x04\
self\x16\x05value\xc3\0\x01\0\x04\0\x1e[method]glxf-node.set-children\x01D\x01@\0\
\0#\x04\0\x17[constructor]glxf-scene\x01E\x01@\x01\x04self&\0y\x04\0\x15[method]\
glxf-scene.id\x01F\x01@\x01\x04self&\0s\x04\0\x17[method]glxf-scene.name\x01G\x01\
@\x02\x04self&\x05values\x01\0\x04\0\x1b[method]glxf-scene.set-name\x01H\x01@\x01\
\x04self&\0\x13\x04\0\x18[method]glxf-scene.nodes\x01I\x01@\x02\x04self&\x04node\
\x16\x01\0\x04\0\x1b[method]glxf-scene.add-node\x01J\x04\0\x1e[method]glxf-scene\
.remove-node\x01J\x04\0\x08get-root\x01\x1c\x03\x01\x10wired:scene/glxf\x05\x18\x01\
B\x07\x04\0\x06script\x03\x01\x01i\0\x01@\0\0\x01\x04\0\x13[constructor]script\x01\
\x02\x01h\0\x01@\x02\x04self\x03\x05deltav\x01\0\x04\0\x15[method]script.update\x01\
\x04\x04\x01\x12wired:script/types\x05\x19\x04\x01\x13unavi:system/script\x04\0\x0b\
\x0c\x01\0\x06script\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-comp\
onent\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
