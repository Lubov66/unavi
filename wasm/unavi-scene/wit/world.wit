package unavi:scene;

world guest {
    include wired:scene/prelude;

    export api;
}

world prelude {
  import api;
}

interface api {
  use wired:math/types.{transform};
  use wired:scene/node.{node};

  list-scenes: func() -> list<scene>;
  add-scene: func(value: borrow<scene>);
  remove-scene: func(value: borrow<scene>);

  // An abstraction over the `wired:scene` glTF and glXF APIs.
  // New scenes will be stored in their own glTF file, and
  // will be added to the root glXF document when `add-scene` is called.
  resource scene {
    constructor();

    list-nodes: func() -> list<node>;
    add-node: func(value: borrow<node>);
    remove-node: func(value: borrow<node>);

    transform: func() -> transform;
    set-transform: func(value: transform);

    active: func() -> bool;
    set-active: func(value: bool);
  }
}
