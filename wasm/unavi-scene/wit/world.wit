package unavi:scene;

world guest {
    include wired:scene/prelude;

    export api;
}

world prelude {
  import api;
}

interface api {
  use wired:math/types.{transform};
  use wired:scene/node.{node};

  resource root {
    list-scenes: static func() -> list<scene>;
    add-scene: static func(value: borrow<scene>);
    remove-scene: static func(value: borrow<scene>);
  }

  // An abstraction over the `wired:scene` glTF and glXF APIs.
  // New scenes are stored as separate glTF documents.
  resource scene {
    // Creates a new scene and adds it to the root glXF.
    constructor();

    list-nodes: func() -> list<node>;
    // Creates a [node] and adds it to the scene.
    create-node: func() -> node;
    add-node: func(value: borrow<node>);
    remove-node: func(value: borrow<node>);

    transform: func() -> transform;
    set-transform: func(value: transform);

    active: func() -> bool;
    set-active: func(value: bool);
  }
}
