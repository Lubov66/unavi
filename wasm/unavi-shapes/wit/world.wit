package unavi:shapes;

world shapes {
    import wired:log/api;
    import wired:scene/mesh;

    export api;
}

interface api {
  use wired:math/types.{vec3};
  use wired:scene/mesh.{mesh};
  use wired:scene/node.{node};

  resource cylinder {
    constructor(radius: f32, height: f32);

    // Whether to cap the ends of the cylinder.
    cap: func() -> bool;
    set-cap: func(value: bool);

    height: func() -> f32;
    set-height: func(value: f32);

    radius: func() -> f32;
    set-radius: func(value: f32);

    // The number of vertices used for the top and bottom of the cylinder.
    resolution: func() -> u8;
    set-resolution: func(value: u8);

    // The number of segments along the height of the cylinder.
    segments: func() -> u8;
    set-segments: func(value: u8);

    // Creates a mesh of this shape.
    to-mesh: func() -> mesh;
    // Creates a node with a mesh of this shape.
    to-node: func() -> node;
    // Creates a node with a mesh and physics collider of this shape.
    to-physics-node: func() -> node;
  }

  resource cuboid {
    constructor(size: vec3);

    size: func() -> vec3;
    set-size: func(value: vec3);

    // Creates a mesh of this shape.
    to-mesh: func() -> mesh;
    // Creates a node with a mesh of this shape.
    to-node: func() -> node;
    // Creates a node with a mesh and physics collider of this shape.
    to-physics-node: func() -> node;
  }

  record sphere-ico {
    subdivisions: u8
  }

  record sphere-uv {
    sectors: u8,
    stacks: u8,
  }

  variant sphere-kind {
    // An icosphere, a spherical mesh that consists of similar sized triangles.
    ico(sphere-ico),
    // A UV sphere, a spherical mesh that consists of quadrilaterals
    uv(sphere-uv),
  }

  resource sphere {
    new-ico: static func(radius: f32) -> sphere;
    new-uv: static func(radius: f32) -> sphere;

    radius: func() -> f32;
    set-radius: func(value: f32);

    kind: func() -> sphere-kind;
    set-kind: func(value: sphere-kind);

    // Creates a mesh of this shape.
    to-mesh: func() -> mesh;
    // Creates a node with a mesh of this shape.
    to-node: func() -> node;
    // Creates a node with a mesh and physics collider of this shape.
    to-physics-node: func() -> node;
  }
}
