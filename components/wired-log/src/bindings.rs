// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod wired {
        pub mod log {
            #[allow(clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum LogLevel {
                    Debug,
                    Info,
                    Warn,
                    Error,
                }
                impl ::core::fmt::Debug for LogLevel {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                            LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                            LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                            LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        }
                    }
                }

                impl LogLevel {
                    pub(crate) unsafe fn _lift(val: u8) -> LogLevel {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => LogLevel::Debug,
                            1 => LogLevel::Info,
                            2 => LogLevel::Warn,
                            3 => LogLevel::Error,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_log_cabi<T: Guest>(arg0: i32, arg1: *mut u8, arg2: usize) {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::log(LogLevel::_lift(arg0 as u8), _rt::string_lift(bytes0));
                }
                pub trait Guest {
                    /// Logs a message with the given log level.
                    fn log(level: LogLevel, msg: _rt::String);
                }
                #[doc(hidden)]

                macro_rules! __export_wired_log_api_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "wired:log/api#log"]
          unsafe extern "C" fn export_log(arg0: i32,arg1: *mut u8,arg2: usize,) {
            $($path_to_types)*::_export_log_cabi::<$ty>(arg0, arg1, arg2)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_wired_log_api_cabi;
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_host_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wired::log::api::__export_wired_log_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::wired::log::api);
  )
}
#[doc(inline)]
pub(crate) use __export_host_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:host:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 233] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07o\x01A\x02\x01A\x02\x01\
B\x04\x01m\x04\x05debug\x04info\x04warn\x05error\x04\0\x09log-level\x03\0\0\x01@\
\x02\x05level\x01\x03msgs\x01\0\x04\0\x03log\x01\x02\x04\x01\x0dwired:log/api\x05\
\0\x04\x01\x0ewired:log/host\x04\0\x0b\x0a\x01\0\x04host\x03\0\0\0G\x09producers\
\x01\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21\
.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
