// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod wired {
        pub mod gltf {

            #[allow(clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// A glTF mesh.
                #[derive(Clone)]
                pub struct Mesh {
                    /// A unique identifier for this mesh.
                    pub id: u32,
                    pub name: _rt::String,
                    pub extras: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for Mesh {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Mesh")
                            .field("id", &self.id)
                            .field("name", &self.name)
                            .field("extras", &self.extras)
                            .finish()
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_meshes_cabi<T: Guest>() -> *mut u8 {
                    let result0 = T::meshes();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 4);
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 24);
                        {
                            let Mesh {
                                id: id2,
                                name: name2,
                                extras: extras2,
                            } = e;
                            *base.add(0).cast::<i32>() = _rt::as_i32(id2);
                            let vec3 = (name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(8).cast::<usize>() = len3;
                            *base.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                            match extras2 {
                                Some(e) => {
                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base.add(20).cast::<usize>() = len4;
                                    *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_meshes<T: Guest>(arg0: *mut u8) {
                    let l5 = *arg0.add(0).cast::<*mut u8>();
                    let l6 = *arg0.add(4).cast::<usize>();
                    let base7 = l5;
                    let len7 = l6;
                    for i in 0..len7 {
                        let base = base7.add(i * 24);
                        {
                            let l0 = *base.add(4).cast::<*mut u8>();
                            let l1 = *base.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = i32::from(*base.add(12).cast::<u8>());
                            match l2 {
                                0 => (),
                                _ => {
                                    let l3 = *base.add(16).cast::<*mut u8>();
                                    let l4 = *base.add(20).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(base7, len7 * 24, 4);
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_spawn_mesh_cabi<T: Guest>() -> *mut u8 {
                    let result0 = T::spawn_mesh();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let Mesh {
                        id: id2,
                        name: name2,
                        extras: extras2,
                    } = result0;
                    *ptr1.add(0).cast::<i32>() = _rt::as_i32(id2);
                    let vec3 = (name2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    match extras2 {
                        Some(e) => {
                            *ptr1.add(12).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1.add(20).cast::<usize>() = len4;
                            *ptr1.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        None => {
                            *ptr1.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_spawn_mesh<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = i32::from(*arg0.add(12).cast::<u8>());
                    match l2 {
                        0 => (),
                        _ => {
                            let l3 = *arg0.add(16).cast::<*mut u8>();
                            let l4 = *arg0.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_add_mesh_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::add_mesh(Mesh {
                        id: arg0 as u32,
                        name: _rt::string_lift(bytes0),
                        extras: match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg5;
                                    let bytes1 = _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_remove_mesh_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) {
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::remove_mesh(Mesh {
                        id: arg0 as u32,
                        name: _rt::string_lift(bytes0),
                        extras: match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg5;
                                    let bytes1 = _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                }
                pub trait Guest {
                    /// Get all meshes in the world.
                    fn meshes() -> _rt::Vec<Mesh>;
                    /// Spawn a new mesh.
                    fn spawn_mesh() -> Mesh;
                    /// Add a mesh to the world.
                    fn add_mesh(m: Mesh);
                    /// Remove a mesh from the world.
                    fn remove_mesh(m: Mesh);
                }
                #[doc(hidden)]

                macro_rules! __export_wired_gltf_types_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


      #[export_name = "wired:gltf/types#meshes"]
      unsafe extern "C" fn export_meshes() -> *mut u8 {
        $($path_to_types)*::_export_meshes_cabi::<$ty>()
      }

      #[export_name = "cabi_post_wired:gltf/types#meshes"]
      unsafe extern "C" fn _post_return_meshes(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_meshes::<$ty>(arg0)
      }

      #[export_name = "wired:gltf/types#spawn-mesh"]
      unsafe extern "C" fn export_spawn_mesh() -> *mut u8 {
        $($path_to_types)*::_export_spawn_mesh_cabi::<$ty>()
      }

      #[export_name = "cabi_post_wired:gltf/types#spawn-mesh"]
      unsafe extern "C" fn _post_return_spawn_mesh(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_spawn_mesh::<$ty>(arg0)
      }

      #[export_name = "wired:gltf/types#add-mesh"]
      unsafe extern "C" fn export_add_mesh(arg0: i32,arg1: *mut u8,arg2: usize,arg3: i32,arg4: *mut u8,arg5: usize,) {
        $($path_to_types)*::_export_add_mesh_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
      }

      #[export_name = "wired:gltf/types#remove-mesh"]
      unsafe extern "C" fn export_remove_mesh(arg0: i32,arg1: *mut u8,arg2: usize,arg3: i32,arg4: *mut u8,arg5: usize,) {
        $($path_to_types)*::_export_remove_mesh_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_wired_gltf_types_cabi;

                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 24]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 24]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_host_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wired::gltf::types::__export_wired_gltf_types_cabi!($ty with_types_in $($path_to_types_root)*::exports::wired::gltf::types);
  )
}
#[doc(inline)]
pub(crate) use __export_host_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:host:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 283] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa0\x01\x01A\x02\x01\
A\x02\x01B\x0b\x01ks\x01r\x03\x02idy\x04names\x06extras\0\x04\0\x04mesh\x03\0\x01\
\x01p\x02\x01@\0\0\x03\x04\0\x06meshes\x01\x04\x01@\0\0\x02\x04\0\x0aspawn-mesh\x01\
\x05\x01@\x01\x01m\x02\x01\0\x04\0\x08add-mesh\x01\x06\x04\0\x0bremove-mesh\x01\x06\
\x04\x01\x10wired:gltf/types\x05\0\x04\x01\x0fwired:gltf/host\x04\0\x0b\x0a\x01\0\
\x04host\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.2\
01.0\x10wit-bindgen-rust\x060.20.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
